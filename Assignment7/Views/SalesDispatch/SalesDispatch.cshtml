<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wheat Flour Management System - Enhanced</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

            .header h1 {
                color: #2c3e50;
                text-align: center;
                font-size: 2.5rem;
                margin-bottom: 10px;
            }

            .header p {
                text-align: center;
                color: #7f8c8d;
                font-size: 1.1rem;
            }

        .nav-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .nav-tab {
            background: rgba(255, 255, 255, 0.9);
            border: none;
            padding: 15px 25px;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            color: #2c3e50;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

            .nav-tab:hover {
                background: #3498db;
                color: white;
                transform: translateY(-2px);
            }

            .nav-tab.active {
                background: #e74c3c;
                color: white;
            }

        .tab-content {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

            .tab-content.active {
                display: block;
                animation: fadeIn 0.5s ease;
            }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .form-section {
            margin-bottom: 30px;
        }

            .form-section h3 {
                color: #2c3e50;
                margin-bottom: 20px;
                font-size: 1.4rem;
                border-bottom: 2px solid #3498db;
                padding-bottom: 10px;
            }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

            .form-group label {
                margin-bottom: 8px;
                font-weight: 600;
                color: #2c3e50;
            }

            .form-group input,
            .form-group select,
            .form-group textarea {
                padding: 12px;
                border: 2px solid #ddd;
                border-radius: 8px;
                font-size: 1rem;
                transition: border-color 0.3s ease;
            }

                .form-group input:focus,
                .form-group select:focus,
                .form-group textarea:focus {
                    outline: none;
                    border-color: #3498db;
                    box-shadow: 0 0 10px rgba(52, 152, 219, 0.2);
                }

        .btn {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            margin: 5px;
        }

            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            }

        .btn-success {
            background: linear-gradient(135deg, #27ae60, #229954);
        }

        .btn-danger {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
        }

        .btn-warning {
            background: linear-gradient(135deg, #f39c12, #e67e22);
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

            .data-table th,
            .data-table td {
                padding: 15px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }

            .data-table th {
                background: linear-gradient(135deg, #34495e, #2c3e50);
                color: white;
                font-weight: 600;
            }

            .data-table tr:hover {
                background: #f8f9fa;
            }

        .status-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-approved {
            background: #d4edda;
            color: #155724;
        }

        .status-dispatched {
            background: #d1ecf1;
            color: #0c5460;
        }

        .status-delivered {
            background: #d1f2eb;
            color: #00695c;
        }

        .dashboard-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .dashboard-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

            .dashboard-card:hover {
                transform: translateY(-5px);
            }

            .dashboard-card h3 {
                font-size: 2rem;
                margin-bottom: 10px;
            }

            .dashboard-card p {
                font-size: 1.1rem;
                opacity: 0.9;
            }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border-left: 4px solid #28a745;
        }

        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border-left: 4px solid #dc3545;
        }

        /* Order Items Specific Styles */
        .order-items-container {
            background: #f8f9fa;
            border: 2px dashed #3498db;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
        }

        .order-item {
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

            .order-item:last-child {
                margin-bottom: 0;
            }

        .item-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }

        .order-summary {
            background: #e8f4fd;
            border: 1px solid #3498db;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }

            .order-summary h4 {
                color: #2c3e50;
                margin-bottom: 15px;
            }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .total-row {
            border-top: 2px solid #3498db;
            padding-top: 8px;
            font-size: 1.1rem;
            color: #e74c3c;
        }

        .collapsible-order {
            cursor: pointer;
            background: #f1f2f6;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
        }

            .collapsible-order:hover {
                background: #ddd;
            }

        .order-details {
            display: none;
            padding: 15px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-bottom: 10px;
        }

            .order-details.active {
                display: block;
            }

        @@media (max-width: 768px) {
            .container

        {
            padding: 10px;
        }

        .header h1 {
            font-size: 2rem;
        }

        .nav-tabs {
            justify-content: center;
        }

        .nav-tab {
            padding: 10px 15px;
            font-size: 0.9rem;
        }

        .form-grid,
        .item-grid {
            grid-template-columns: 1fr;
        }

        .dashboard-cards {
            grid-template-columns: 1fr;
        }

        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🌾 Enhanced Wheat Flour Management System</h1>
            <p>Complete Sales Order to Dispatch Management - With Multiple Items Support</p>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('dashboard')">📊 Dashboard</button>
            <button class="nav-tab" onclick="showTab('customers')">👥 Customer Management</button>
            <button class="nav-tab" onclick="showTab('orders')">📝 Sales Orders</button>
            <button class="nav-tab" onclick="showTab('production')">🏭 Production Planning</button>
            <button class="nav-tab" onclick="showTab('dispatch')">🚚 Dispatch Management</button>
            <button class="nav-tab" onclick="showTab('delivery')">📦 Delivery Tracking</button>
            <button class="nav-tab" onclick="showTab('financial')">💰 Financial Management</button>
            <button class="nav-tab" onclick="showTab('reports')">📈 Reports</button>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content active">
            <div class="dashboard-cards">
                <div class="dashboard-card">
                    <h3 id="totalOrders">0</h3>
                    <p>Total Orders</p>
                </div>
                <div class="dashboard-card">
                    <h3 id="totalCustomers">0</h3>
                    <p>Total Customers</p>
                </div>
                <div class="dashboard-card">
                    <h3 id="pendingOrders">0</h3>
                    <p>Pending Orders</p>
                </div>
                <div class="dashboard-card">
                    <h3 id="totalRevenue">₹0</h3>
                    <p>Total Revenue</p>
                </div>
            </div>

            <div class="form-section">
                <h3>📊 Recent Activities</h3>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Activity</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="recentActivities">
                        <tr>
                            <td>10:30 AM</td>
                            <td>New order created for Customer ABC</td>
                            <td><span class="status-badge status-pending">Pending</span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Customer Management Tab -->
        <div id="customers" class="tab-content">
            <div class="form-section">
                <h3>👥 Add New Customer</h3>
                <form id="customerForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="customerName">Customer Name *</label>
                            <input type="text" id="customerName" required>
                        </div>
                        <div class="form-group">
                            <label for="customerPhone">Phone Number *</label>
                            <input type="tel" id="customerPhone" required>
                        </div>
                        <div class="form-group">
                            <label for="customerEmail">Email</label>
                            <input type="email" id="customerEmail">
                        </div>
                        <div class="form-group">
                            <label for="customerGST">GST Number</label>
                            <input type="text" id="customerGST">
                        </div>
                        <div class="form-group">
                            <label for="customerCategory">Category *</label>
                            <select id="customerCategory" required>
                                <option value="">Select Category</option>
                                <option value="Retailer">Retailer</option>
                                <option value="Wholesaler">Wholesaler</option>
                                <option value="Distributor">Distributor</option>
                                <option value="Direct Consumer">Direct Consumer</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="customerAddress">Address *</label>
                        <textarea id="customerAddress" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">Add Customer</button>
                </form>
            </div>

            <div class="form-section">
                <h3>📋 Customer List</h3>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Phone</th>
                            <th>Category</th>
                            <th>GST</th>
                            <th>Total Orders</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="customerList"></tbody>
                </table>
            </div>
        </div>

        <!-- Enhanced Sales Orders Tab -->
        <div id="orders" class="tab-content">
            <div class="form-section">
                <h3>📝 Create New Order with Multiple Items</h3>
                <form id="orderForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="orderCustomer">Select Customer *</label>
                            <select id="orderCustomer" required>
                                <option value="">Select Customer</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="orderDate">Order Date *</label>
                            <input type="date" id="orderDate" required>
                        </div>
                        <div class="form-group">
                            <label for="deliveryDate">Expected Delivery Date *</label>
                            <input type="date" id="deliveryDate" required>
                        </div>
                    </div>

                    <div class="order-items-container">
                        <h4>📦 Order Items</h4>
                        <div id="orderItems">
                            <!-- Order items will be added here dynamically -->
                        </div>
                        <button type="button" class="btn btn-success" onclick="addOrderItem()">+ Add Item</button>
                    </div>

                    <div class="form-group">
                        <label for="specialInstructions">Special Instructions</label>
                        <textarea id="specialInstructions" rows="3"></textarea>
                    </div>

                    <div class="order-summary" id="orderSummary" style="display: none;">
                        <h4>📋 Order Summary</h4>
                        <div id="summaryContent"></div>
                    </div>

                    <button type="submit" class="btn btn-success">Create Order</button>
                    <button type="button" class="btn" onclick="clearOrder()">Clear Order</button>
                </form>
            </div>

            <div class="form-section">
                <h3>📋 Order List</h3>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Items Count</th>
                            <th>Total Amount</th>
                            <th>Order Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="orderList"></tbody>
                </table>
            </div>

            <div class="form-section">
                <h3>📋 Detailed Order View</h3>
                <div id="detailedOrders"></div>
            </div>
        </div>

        <!-- Production Planning Tab -->
        <div id="production" class="tab-content">
            <div class="form-section">
                <h3>🏭 Production Planning</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label for="batchNumber">Batch Number</label>
                        <input type="text" id="batchNumber" readonly>
                    </div>
                    <div class="form-group">
                        <label for="productionDate">Production Date</label>
                        <input type="date" id="productionDate">
                    </div>
                    <div class="form-group">
                        <label for="rawMaterialReq">Raw Material Required (kg)</label>
                        <input type="number" id="rawMaterialReq" readonly>
                    </div>
                </div>
            </div>

            <div class="form-section">
                <h3>📋 Production Batches</h3>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Batch ID</th>
                            <th>Production Date</th>
                            <th>Flour Type</th>
                            <th>Quantity</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="productionList">
                        <tr>
                            <td>BATCH001</td>
                            <td>2025-01-15</td>
                            <td>Whole Wheat</td>
                            <td>500kg</td>
                            <td><span class="status-badge status-approved">In Production</span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Dispatch Management Tab -->
        <div id="dispatch" class="tab-content">
            <div class="form-section">
                <h3>🚚 Dispatch Planning</h3>
                <form id="dispatchForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="dispatchOrder">Select Order *</label>
                            <select id="dispatchOrder" required>
                                <option value="">Select Order for Dispatch</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="vehicleNumber">Vehicle Number *</label>
                            <input type="text" id="vehicleNumber" required>
                        </div>
                        <div class="form-group">
                            <label for="driverName">Driver Name *</label>
                            <input type="text" id="driverName" required>
                        </div>
                        <div class="form-group">
                            <label for="driverPhone">Driver Phone *</label>
                            <input type="tel" id="driverPhone" required>
                        </div>
                        <div class="form-group">
                            <label for="dispatchDate">Dispatch Date *</label>
                            <input type="datetime-local" id="dispatchDate" required>
                        </div>
                        <div class="form-group">
                            <label for="estimatedDelivery">Estimated Delivery Time</label>
                            <input type="datetime-local" id="estimatedDelivery">
                        </div>
                    </div>
                    <button type="submit" class="btn btn-success">Schedule Dispatch</button>
                </form>
            </div>

            <div class="form-section">
                <h3>📋 Dispatch List</h3>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Vehicle</th>
                            <th>Driver</th>
                            <th>Dispatch Time</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="dispatchList"></tbody>
                </table>
            </div>
        </div>

        <!-- Delivery Tracking Tab -->
        <div id="delivery" class="tab-content">
            <div class="form-section">
                <h3>📦 Delivery Tracking</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label for="trackingOrder">Select Order to Track</label>
                        <select id="trackingOrder">
                            <option value="">Select Order</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="currentLocation">Current Location</label>
                        <input type="text" id="currentLocation" readonly value="En route to delivery address">
                    </div>
                    <div class="form-group">
                        <label for="estimatedArrival">Estimated Arrival</label>
                        <input type="text" id="estimatedArrival" readonly value="2 hours">
                    </div>
                </div>
            </div>

            <div class="form-section">
                <h3>📋 Proof of Delivery</h3>
                <form id="podForm">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="podOrder">Select Delivered Order</label>
                            <select id="podOrder">
                                <option value="">Select Order</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="deliveryPhoto">Upload Delivery Photo</label>
                            <input type="file" id="deliveryPhoto" accept="image/*">
                        </div>
                        <div class="form-group">
                            <label for="customerSignature">Customer Signature</label>
                            <input type="text" id="customerSignature" placeholder="Digital signature or name">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="deliveryRemarks">Delivery Remarks</label>
                        <textarea id="deliveryRemarks" rows="3"></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">Confirm Delivery</button>
                </form>
            </div>
        </div>

        <!-- Financial Management Tab -->
        <div id="financial" class="tab-content">
            <div class="form-section">
                <h3>💰 Payment Management</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label for="paymentOrder">Select Order for Payment</label>
                        <select id="paymentOrder">
                            <option value="">Select Order</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="paymentMethod">Payment Method</label>
                        <select id="paymentMethod">
                            <option value="">Select Method</option>
                            <option value="UPI">UPI</option>
                            <option value="Credit Card">Credit Card</option>
                            <option value="Debit Card">Debit Card</option>
                            <option value="Net Banking">Net Banking</option>
                            <option value="Cash">Cash</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="paymentAmount">Payment Amount (₹)</label>
                        <input type="number" id="paymentAmount" step="0.01">
                    </div>
                    <div class="form-group">
                        <label for="paymentDate">Payment Date</label>
                        <input type="date" id="paymentDate">
                    </div>
                </div>
                <button type="button" class="btn btn-success" onclick="processPayment()">Process Payment</button>
            </div>

            <div class="form-section">
                <h3>📋 Payment History</h3>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Amount</th>
                            <th>Method</th>
                            <th>Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="paymentList">
                        <tr>
                            <td>ORD001</td>
                            <td>ABC Traders</td>
                            <td>₹5,000</td>
                            <td>UPI</td>
                            <td>2025-01-15</td>
                            <td><span class="status-badge status-approved">Paid</span></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Reports Tab -->
        <div id="reports" class="tab-content">
            <div class="form-section">
                <h3>📈 Business Reports</h3>

                <div class="dashboard-cards">
                    <div class="dashboard-card">
                        <h3 id="monthlyOrders">15</h3>
                        <p>Orders This Month</p>
                    </div>
                    <div class="dashboard-card">
                        <h3 id="monthlyRevenue">₹75,000</h3>
                        <p>Monthly Revenue</p>
                    </div>
                    <div class="dashboard-card">
                        <h3 id="monthlyDeliveries">12</h3>
                        <p>Deliveries Completed</p>
                    </div>
                    <div class="dashboard-card">
                        <h3>95%</h3>
                        <p>Customer Satisfaction</p>
                    </div>
                </div>

                <div class="form-grid">
                    <div class="form-group">
                        <label for="reportType">Report Type</label>
                        <select id="reportType">
                            <option value="">Select Report</option>
                            <option value="sales">Sales Report</option>
                            <option value="dispatch">Dispatch Report</option>
                            <option value="customer">Customer Report</option>
                            <option value="financial">Financial Report</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="reportFrom">From Date</label>
                        <input type="date" id="reportFrom">
                    </div>
                    <div class="form-group">
                        <label for="reportTo">To Date</label>
                        <input type="date" id="reportTo">
                    </div>
                </div>
                <button type="button" class="btn btn-success" onclick="generateReport()">Generate Report</button>
                <button type="button" class="btn" onclick="exportReport()">Export to Excel</button>
            </div>
        </div>
    </div>

    <script>
        // Initialize localStorage with demo data if empty
        if (!localStorage.getItem('orders')) {
            localStorage.setItem('orders', JSON.stringify([
                {
                    id: 'ORD001',
                    customerId: 1,
                    customerName: 'ABC Traders',
                    orderDate: '2025-01-15',
                    deliveryDate: '2025-01-20',
                    status: 'Pending',
                    specialInstructions: 'Handle with care',
                    items: [
                        {
                            flourType: 'Whole Wheat',
                            packaging: '25kg',
                            quantity: 10,
                            rate: 500,
                            total: 5000
                        },
                        {
                            flourType: 'Refined',
                            packaging: '10kg',
                            quantity: 5,
                            rate: 450,
                            total: 2250
                        }
                    ],
                    totalAmount: 7250
                },
                {
                    id: 'ORD002',
                    customerId: 2,
                    customerName: 'XYZ Store',
                    orderDate: '2025-01-16',
                    deliveryDate: '2025-01-22',
                    status: 'Approved',
                    specialInstructions: 'Morning delivery preferred',
                    items: [
                        {
                            flourType: 'Semolina',
                            packaging: '5kg',
                            quantity: 15,
                            rate: 350,
                            total: 5250
                        }
                    ],
                    totalAmount: 5250
                }
            ]));
        }

        if (!localStorage.getItem('dispatches')) {
            localStorage.setItem('dispatches', JSON.stringify([]));
        }

        if (!localStorage.getItem('payments')) {
            localStorage.setItem('payments', JSON.stringify([
                {
                    id: 1,
                    orderId: 'ORD001',
                    customerName: 'ABC Traders',
                    amount: 7250,
                    method: 'UPI',
                    date: '2025-01-15',
                    status: 'Paid'
                }
            ]));
        }

        // Global variables with data validation and migration
        let customers = JSON.parse(localStorage.getItem('customers')) || [];
        let orders = JSON.parse(localStorage.getItem('orders')) || [];
        let dispatches = JSON.parse(localStorage.getItem('dispatches')) || [];
        let payments = JSON.parse(localStorage.getItem('payments')) || [];
        let currentOrderItems = [];
        let itemCounter = 0; // Keep track of unique item IDs

        // Data migration function to ensure all orders have proper structure
        function migrateOrderData() {
            let needsUpdate = false;

            orders = orders.map(order => {
                // If order doesn't have items array, create it from old structure
                if (!order.items || !Array.isArray(order.items)) {
                    needsUpdate = true;
                    // Try to reconstruct from old single-item structure
                    if (order.flourType && order.packaging && order.quantity && order.rate) {
                        order.items = [{
                            flourType: order.flourType,
                            packaging: order.packaging,
                            quantity: order.quantity,
                            rate: order.rate,
                            total: order.quantity * order.rate
                        }];
                        // Clean up old properties
                        delete order.flourType;
                        delete order.packaging;
                        delete order.quantity;
                        delete order.rate;
                    } else {
                        // Create empty items array as fallback
                        order.items = [];
                    }
                }

                // Ensure totalAmount exists
                if (!order.totalAmount && order.items.length > 0) {
                    order.totalAmount = order.items.reduce((sum, item) => sum + (item.total || 0), 0);
                    needsUpdate = true;
                }

                return order;
            });

            // Update localStorage if migration was needed
            if (needsUpdate) {
                localStorage.setItem('orders', JSON.stringify(orders));
                console.log('Order data migrated successfully');
            }
        }

        // Tab functionality
        function showTab(tabName) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(tab => tab.classList.remove('active'));

            // Remove active class from all nav tabs
            const navTabs = document.querySelectorAll('.nav-tab');
            navTabs.forEach(tab => tab.classList.remove('active'));

            // Show selected tab content
            document.getElementById(tabName).classList.add('active');

            // Add active class to clicked nav tab
            event.target.classList.add('active');

            // Load data for specific tabs
            if (tabName === 'customers') {
                loadCustomers();
                loadCustomerOptions();
            } else if (tabName === 'orders') {
                loadOrders();
                loadDetailedOrders();
                loadCustomerOptions();
            } else if (tabName === 'dispatch') {
                loadDispatches();
                loadOrderOptions();
            } else if (tabName === 'delivery') {
                loadOrderOptions();
            } else if (tabName === 'financial') {
                loadPayments();
                loadOrderOptions();
            } else if (tabName === 'dashboard') {
                updateDashboard();
            }
        }

        // Dashboard functions with safe data handling
        function updateDashboard() {
            document.getElementById('totalOrders').textContent = orders.length;
            document.getElementById('totalCustomers').textContent = customers.length;
            document.getElementById('pendingOrders').textContent = orders.filter(o => o.status === 'Pending').length;

            const totalRevenue = orders.reduce((sum, order) => {
                return sum + (order.totalAmount || 0);
            }, 0);
            document.getElementById('totalRevenue').textContent = `₹${totalRevenue.toLocaleString()}`;
        }

        // Customer Management
        document.getElementById('customerForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const newCustomer = {
                id: Date.now(),
                name: document.getElementById('customerName').value,
                phone: document.getElementById('customerPhone').value,
                email: document.getElementById('customerEmail').value,
                gst: document.getElementById('customerGST').value,
                category: document.getElementById('customerCategory').value,
                address: document.getElementById('customerAddress').value
            };

            customers.push(newCustomer);
            localStorage.setItem('customers', JSON.stringify(customers));

            showAlert('Customer added successfully!', 'success');
            this.reset();
            loadCustomers();
            loadCustomerOptions();
        });

        function loadCustomers() {
            const tbody = document.getElementById('customerList');
            tbody.innerHTML = '';

            customers.forEach(customer => {
                const customerOrders = orders.filter(o => o.customerId === customer.id);
                const row = `
                    <tr>
                        <td>${customer.name}</td>
                        <td>${customer.phone}</td>
                        <td>${customer.category}</td>
                        <td>${customer.gst || 'N/A'}</td>
                        <td>${customerOrders.length}</td>
                        <td>
                            <button class="btn btn-warning" onclick="viewCustomerOrders(${customer.id})">View Orders</button>
                            <button class="btn btn-danger" onclick="deleteCustomer(${customer.id})">Delete</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        function viewCustomerOrders(customerId) {
            const customer = customers.find(c => c.id === customerId);
            const customerOrders = orders.filter(o => o.customerId === customerId);

            let orderDetails = `<h4>Orders for ${customer.name}</h4>`;
            customerOrders.forEach(order => {
                orderDetails += `
                    <div class="order-item">
                        <strong>Order ${order.id}</strong> - ${order.orderDate} - ₹${order.totalAmount.toLocaleString()}
                        <br>Status: <span class="status-badge ${getStatusClass(order.status)}">${order.status}</span>
                    </div>
                `;
            });

            if (customerOrders.length === 0) {
                orderDetails += '<p>No orders found for this customer.</p>';
            }

            showAlert(orderDetails, 'success');
        }

        function loadCustomerOptions() {
            const selects = ['orderCustomer', 'paymentOrder'];
            selects.forEach(selectId => {
                const select = document.getElementById(selectId);
                if (select) {
                    select.innerHTML = '<option value="">Select Customer</option>';
                    customers.forEach(customer => {
                        select.innerHTML += `<option value="${customer.id}">${customer.name}</option>`;
                    });
                }
            });
        }

        function deleteCustomer(id) {
            if (confirm('Are you sure you want to delete this customer?')) {
                customers = customers.filter(c => c.id !== id);
                localStorage.setItem('customers', JSON.stringify(customers));
                loadCustomers();
                showAlert('Customer deleted successfully!', 'success');
            }
        }

        // Enhanced Order Management with Multiple Items - FIXED VERSION
        function addOrderItem() {
            const uniqueId = itemCounter++; // Use a unique counter instead of array length
            const itemHtml = `
                <div class="order-item" id="orderItem${uniqueId}" data-item-id="${uniqueId}">
                    <div class="item-grid">
                        <div class="form-group">
                            <label>Flour Type *</label>
                            <select class="flour-type" required onchange="updateOrderSummary()">
                                <option value="">Select Flour Type</option>
                                <option value="Whole Wheat">Whole Wheat</option>
                                <option value="Refined">Refined</option>
                                <option value="Semolina">Semolina</option>
                                <option value="Multi-grain">Multi-grain</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Packaging *</label>
                            <select class="packaging" required onchange="updateOrderSummary()">
                                <option value="">Select Packaging</option>
                                <option value="1kg">1kg Bag</option>
                                <option value="5kg">5kg Bag</option>
                                <option value="10kg">10kg Bag</option>
                                <option value="25kg">25kg Bag</option>
                                <option value="50kg">50kg Bag</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Quantity *</label>
                            <input type="number" class="quantity" min="1" required onchange="updateOrderSummary()">
                        </div>
                        <div class="form-group">
                            <label>Rate per Unit (₹) *</label>
                            <input type="number" class="rate" min="0" step="0.01" required onchange="updateOrderSummary()">
                        </div>
                    </div>
                    <div class="form-group">
                        <strong>Item Total: ₹<span class="item-total">0</span></strong>
                        <button type="button" class="btn btn-danger" onclick="removeOrderItem(${uniqueId})">Remove Item</button>
                    </div>
                </div>
            `;

            document.getElementById('orderItems').insertAdjacentHTML('beforeend', itemHtml);
            updateOrderSummary();
        }

        function removeOrderItem(itemId) {
            const itemElement = document.getElementById(`orderItem${itemId}`);
            if (itemElement) {
                itemElement.remove();
                updateOrderSummary();
            }
        }

        function updateOrderSummary() {
            const orderItemsContainer = document.getElementById('orderItems');
            const items = orderItemsContainer.querySelectorAll('.order-item');
            let totalAmount = 0;
            let validItems = 0;

            // Clear the current order items array and rebuild it
            currentOrderItems = [];

            items.forEach((item) => {
                const flourType = item.querySelector('.flour-type').value;
                const packaging = item.querySelector('.packaging').value;
                const quantity = parseInt(item.querySelector('.quantity').value) || 0;
                const rate = parseFloat(item.querySelector('.rate').value) || 0;

                const itemTotal = quantity * rate;
                item.querySelector('.item-total').textContent = itemTotal.toLocaleString();

                if (flourType && packaging && quantity > 0 && rate > 0) {
                    currentOrderItems.push({
                        flourType,
                        packaging,
                        quantity,
                        rate,
                        total: itemTotal
                    });
                    totalAmount += itemTotal;
                    validItems++;
                }
            });

            const summaryContainer = document.getElementById('orderSummary');
            const summaryContent = document.getElementById('summaryContent');

            if (validItems > 0) {
                summaryContainer.style.display = 'block';
                summaryContent.innerHTML = `
                    <div class="summary-row">
                        <span>Total Items:</span>
                        <span>${validItems}</span>
                    </div>
                    <div class="summary-row total-row">
                        <span>Total Amount:</span>
                        <span>₹${totalAmount.toLocaleString()}</span>
                    </div>
                `;
            } else {
                summaryContainer.style.display = 'none';
            }
        }

        function clearOrder() {
            document.getElementById('orderItems').innerHTML = '';
            currentOrderItems = [];
            itemCounter = 0; // Reset the counter
            document.getElementById('orderSummary').style.display = 'none';
            document.getElementById('orderForm').reset();
        }

        // Enhanced Order Form Submission
        document.getElementById('orderForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const customerId = parseInt(document.getElementById('orderCustomer').value);
            const customer = customers.find(c => c.id === customerId);

            if (currentOrderItems.length === 0) {
                showAlert('Please add at least one item to the order!', 'error');
                return;
            }

            // Filter out empty items
            const validItems = currentOrderItems.filter(item =>
                item.flourType && item.packaging && item.quantity > 0 && item.rate > 0
            );

            if (validItems.length === 0) {
                showAlert('Please complete all item details!', 'error');
                return;
            }

            const totalAmount = validItems.reduce((sum, item) => sum + item.total, 0);

            const newOrder = {
                id: 'ORD' + String(Date.now()).slice(-6),
                customerId: customerId,
                customerName: customer.name,
                orderDate: document.getElementById('orderDate').value,
                deliveryDate: document.getElementById('deliveryDate').value,
                status: 'Pending',
                specialInstructions: document.getElementById('specialInstructions').value,
                items: validItems,
                totalAmount: totalAmount
            };

            orders.push(newOrder);
            localStorage.setItem('orders', JSON.stringify(orders));

            showAlert(`Order created successfully! Order ID: ${newOrder.id}`, 'success');
            clearOrder();
            loadOrders();
            loadDetailedOrders();
            updateDashboard();
        });

        function loadOrders() {
            const tbody = document.getElementById('orderList');
            tbody.innerHTML = '';

            orders.forEach(order => {
                // Ensure order has items array (defensive programming)
                if (!order.items || !Array.isArray(order.items)) {
                    order.items = [];
                }

                const statusClass = getStatusClass(order.status);
                const itemCount = order.items.length;
                const totalAmount = order.totalAmount || 0;

                const row = `
                    <tr>
                        <td>${order.id}</td>
                        <td>${order.customerName}</td>
                        <td>${itemCount} item(s)</td>
                        <td>₹${totalAmount.toLocaleString()}</td>
                        <td>${order.orderDate}</td>
                        <td><span class="status-badge ${statusClass}">${order.status}</span></td>
                        <td>
                            <button class="btn" onclick="viewOrderDetails('${order.id}')">View Details</button>
                            <button class="btn" onclick="updateOrderStatus('${order.id}', 'Approved')">Approve</button>
                            <button class="btn btn-danger" onclick="deleteOrder('${order.id}')">Delete</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        function loadDetailedOrders() {
            const container = document.getElementById('detailedOrders');
            container.innerHTML = '';

            orders.forEach(order => {
                // Ensure order has items array
                if (!order.items || !Array.isArray(order.items)) {
                    order.items = [];
                }

                let itemsHtml = '';
                if (order.items.length > 0) {
                    order.items.forEach(item => {
                        itemsHtml += `
                            <tr>
                                <td>${item.flourType || 'N/A'}</td>
                                <td>${item.packaging || 'N/A'}</td>
                                <td>${item.quantity || 0}</td>
                                <td>₹${item.rate || 0}</td>
                                <td>₹${(item.total || 0).toLocaleString()}</td>
                            </tr>
                        `;
                    });
                } else {
                    itemsHtml = '<tr><td colspan="5">No items found</td></tr>';
                }

                const orderHtml = `
                    <div class="collapsible-order" onclick="toggleOrderDetails('${order.id}')">
                        <strong>${order.id}</strong> - ${order.customerName} - ₹${(order.totalAmount || 0).toLocaleString()}
                        <span class="status-badge ${getStatusClass(order.status)}">${order.status}</span>
                    </div>
                    <div class="order-details" id="details-${order.id}">
                        <p><strong>Order Date:</strong> ${order.orderDate}</p>
                        <p><strong>Delivery Date:</strong> ${order.deliveryDate}</p>
                        <p><strong>Special Instructions:</strong> ${order.specialInstructions || 'None'}</p>

                        <h5>Items:</h5>
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Flour Type</th>
                                    <th>Packaging</th>
                                    <th>Quantity</th>
                                    <th>Rate</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${itemsHtml}
                            </tbody>
                        </table>

                        <div class="summary-row total-row" style="margin-top: 15px;">
                            <span>Total Order Amount:</span>
                            <span>₹${(order.totalAmount || 0).toLocaleString()}</span>
                        </div>
                    </div>
                `;

                container.innerHTML += orderHtml;
            });
        }

        function toggleOrderDetails(orderId) {
            const details = document.getElementById(`details-${orderId}`);
            details.classList.toggle('active');
        }

        function viewOrderDetails(orderId) {
            const order = orders.find(o => o.id === orderId);
            if (order) {
                // Ensure order has items array
                if (!order.items || !Array.isArray(order.items)) {
                    order.items = [];
                }

                let itemDetails = '<h4>Order Items:</h4>';
                if (order.items.length > 0) {
                    order.items.forEach((item, index) => {
                        itemDetails += `
                            <div class="order-item">
                                <strong>Item ${index + 1}:</strong> ${item.flourType || 'N/A'} - ${item.packaging || 'N/A'}<br>
                                Quantity: ${item.quantity || 0}, Rate: ₹${item.rate || 0}, Total: ₹${(item.total || 0).toLocaleString()}
                            </div>
                        `;
                    });
                } else {
                    itemDetails += '<p>No items found for this order.</p>';
                }
                itemDetails += `<div class="total-row">Order Total: ₹${(order.totalAmount || 0).toLocaleString()}</div>`;
                showAlert(itemDetails, 'success');
            }
        }

        function loadOrderOptions() {
            const selects = ['dispatchOrder', 'trackingOrder', 'podOrder', 'paymentOrder'];
            selects.forEach(selectId => {
                const select = document.getElementById(selectId);
                if (select) {
                    select.innerHTML = '<option value="">Select Order</option>';
                    orders.forEach(order => {
                        select.innerHTML += `<option value="${order.id}">${order.id} - ${order.customerName} (₹${order.totalAmount.toLocaleString()})</option>`;
                    });
                }
            });
        }

        function updateOrderStatus(orderId, newStatus) {
            const orderIndex = orders.findIndex(o => o.id === orderId);
            if (orderIndex !== -1) {
                orders[orderIndex].status = newStatus;
                localStorage.setItem('orders', JSON.stringify(orders));
                loadOrders();
                loadDetailedOrders();
                updateDashboard();
                showAlert(`Order ${orderId} status updated to ${newStatus}!`, 'success');
            }
        }

        function deleteOrder(orderId) {
            if (confirm('Are you sure you want to delete this order?')) {
                orders = orders.filter(o => o.id !== orderId);
                localStorage.setItem('orders', JSON.stringify(orders));
                loadOrders();
                loadDetailedOrders();
                updateDashboard();
                showAlert('Order deleted successfully!', 'success');
            }
        }

        function getStatusClass(status) {
            switch (status.toLowerCase()) {
                case 'pending': return 'status-pending';
                case 'approved': return 'status-approved';
                case 'dispatched': return 'status-dispatched';
                case 'delivered': return 'status-delivered';
                default: return 'status-pending';
            }
        }

        // Dispatch Management
        document.getElementById('dispatchForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const orderId = document.getElementById('dispatchOrder').value;
            const newDispatch = {
                id: Date.now(),
                orderId: orderId,
                vehicleNumber: document.getElementById('vehicleNumber').value,
                driverName: document.getElementById('driverName').value,
                driverPhone: document.getElementById('driverPhone').value,
                dispatchDate: document.getElementById('dispatchDate').value,
                estimatedDelivery: document.getElementById('estimatedDelivery').value,
                status: 'Dispatched'
            };

            dispatches.push(newDispatch);
            localStorage.setItem('dispatches', JSON.stringify(dispatches));

            updateOrderStatus(orderId, 'Dispatched');

            showAlert('Dispatch scheduled successfully!', 'success');
            this.reset();
            loadDispatches();
        });

        function loadDispatches() {
            const tbody = document.getElementById('dispatchList');
            tbody.innerHTML = '';

            dispatches.forEach(dispatch => {
                const row = `
                    <tr>
                        <td>${dispatch.orderId}</td>
                        <td>${dispatch.vehicleNumber}</td>
                        <td>${dispatch.driverName}</td>
                        <td>${new Date(dispatch.dispatchDate).toLocaleString()}</td>
                        <td><span class="status-badge status-dispatched">${dispatch.status}</span></td>
                        <td>
                            <button class="btn" onclick="markDelivered('${dispatch.orderId}')">Mark Delivered</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        function markDelivered(orderId) {
            updateOrderStatus(orderId, 'Delivered');
            const dispatchIndex = dispatches.findIndex(d => d.orderId === orderId);
            if (dispatchIndex !== -1) {
                dispatches[dispatchIndex].status = 'Delivered';
                localStorage.setItem('dispatches', JSON.stringify(dispatches));
                loadDispatches();
            }
            showAlert(`Order ${orderId} marked as delivered!`, 'success');
        }

        // POD (Proof of Delivery) Form
        document.getElementById('podForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const orderId = document.getElementById('podOrder').value;
            updateOrderStatus(orderId, 'Delivered');
            showAlert('Proof of delivery submitted successfully!', 'success');
            this.reset();
        });

        // Payment Management
        function processPayment() {
            const orderId = document.getElementById('paymentOrder').value;
            const method = document.getElementById('paymentMethod').value;
            const amount = parseFloat(document.getElementById('paymentAmount').value);
            const date = document.getElementById('paymentDate').value;

            if (!orderId || !method || !amount || !date) {
                showAlert('Please fill all payment details!', 'error');
                return;
            }

            const order = orders.find(o => o.id === orderId);
            const newPayment = {
                id: Date.now(),
                orderId: orderId,
                customerName: order.customerName,
                amount: amount,
                method: method,
                date: date,
                status: 'Paid'
            };

            if (!payments) payments = [];
            payments.push(newPayment);
            localStorage.setItem('payments', JSON.stringify(payments));

            showAlert('Payment processed successfully!', 'success');
            loadPayments();

            // Clear form
            document.getElementById('paymentOrder').value = '';
            document.getElementById('paymentMethod').value = '';
            document.getElementById('paymentAmount').value = '';
            document.getElementById('paymentDate').value = '';
        }

        function loadPayments() {
            const tbody = document.getElementById('paymentList');
            tbody.innerHTML = '';

            payments.forEach(payment => {
                const row = `
                    <tr>
                        <td>${payment.orderId}</td>
                        <td>${payment.customerName}</td>
                        <td>₹${payment.amount.toLocaleString()}</td>
                        <td>${payment.method}</td>
                        <td>${payment.date}</td>
                        <td><span class="status-badge status-approved">${payment.status}</span></td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // Reports
        function generateReport() {
            const reportType = document.getElementById('reportType').value;
            const fromDate = document.getElementById('reportFrom').value;
            const toDate = document.getElementById('reportTo').value;

            if (!reportType) {
                showAlert('Please select a report type!', 'error');
                return;
            }

            showAlert(`${reportType} report generated successfully for ${fromDate} to ${toDate}!`, 'success');
        }

        function exportReport() {
            showAlert('Report exported to Excel successfully!', 'success');
        }

        // Utility functions
        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.innerHTML = message;

            const activeTab = document.querySelector('.tab-content.active');
            activeTab.insertBefore(alertDiv, activeTab.firstChild);

            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        function generateBatchNumber() {
            const now = new Date();
            const batch = 'BATCH' + now.getFullYear() + String(now.getMonth() + 1).padStart(2, '0') + String(now.getDate()).padStart(2, '0') + String(Date.now()).slice(-3);
            document.getElementById('batchNumber').value = batch;
        }

        function setDefaultDates() {
            const today = new Date().toISOString().split('T')[0];
            const dateInputs = document.querySelectorAll('input[type="date"]');
            dateInputs.forEach(input => {
                if (!input.value) {
                    input.value = today;
                }
            });
        }

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            // Run data migration first
            migrateOrderData();

            updateDashboard();
            loadCustomers();
            loadCustomerOptions();
            generateBatchNumber();
            setDefaultDates();

            // Add first item by default when orders tab is opened
            addOrderItem();

            // Calculate raw material requirement based on orders (with safe handling)
            const totalQuantity = orders.reduce((sum, order) => {
                if (order.items && Array.isArray(order.items)) {
                    return sum + order.items.reduce((itemSum, item) => itemSum + (item.quantity || 0), 0);
                }
                return sum;
            }, 0);
            document.getElementById('rawMaterialReq').value = totalQuantity * 1.1;
        });

        setInterval(() => {
            updateDashboard();
        }, 30000);
    </script>
</body>
</html>