<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wheat Processing Management System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

            .header h1 {
                font-size: 2.5rem;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }

        .step-container {
            background: white;
            margin: 20px 0;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

            .step-container:hover {
                transform: translateY(-5px);
            }

        .step-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }

        .step-number {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.2rem;
            margin-right: 15px;
        }

        .step-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #333;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-row {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }

        .form-col {
            flex: 1;
            min-width: 200px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #555;
        }

        input[type="number"], input[type="text"], select, textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        textarea {
            resize: vertical;
            min-height: 80px;
        }

            input[type="number"]:focus, input[type="text"]:focus, select:focus, textarea:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
            }

        .btn-success {
            background: linear-gradient(135deg, #56ab2f, #a8e6cf);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(135deg, #f093fb, #f5576c);
            color: white;
        }

        .timer-display {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            margin: 20px 0;
            border-left: 5px solid #667eea;
        }

            .timer-display h3 {
                color: #333;
                margin-bottom: 10px;
            }

        .timer-time {
            font-size: 2rem;
            font-weight: bold;
            color: #667eea;
            font-family: 'Courier New', monospace;
        }

        .status-indicator {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }

        .status-active {
            background: #d4edda;
            color: #155724;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-completed {
            background: #cce7ff;
            color: #004085;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.3s ease;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            background: #28a745;
            color: white;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

            .notification.show {
                transform: translateX(0);
            }

            .notification.warning {
                background: #ffc107;
                color: #212529;
            }

            .notification.error {
                background: #dc3545;
            }

        .file-upload {
            border: 2px dashed #ccc;
            padding: 20px;
            text-align: center;
            border-radius: 8px;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }

            .file-upload:hover {
                border-color: #667eea;
            }

            .file-upload.dragover {
                border-color: #667eea;
                background: #f8f9ff;
            }

        .image-preview {
            max-width: 200px;
            max-height: 200px;
            border-radius: 8px;
            margin: 10px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }

        .production-summary {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            margin: 10px 0;
            padding: 10px;
            background: white;
            border-radius: 5px;
        }

        .hidden {
            display: none;
        }

        .order-info {
            background: #e8f4fd;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            border-left: 4px solid #667eea;
        }

            .order-info h4 {
                color: #667eea;
                margin-bottom: 10px;
            }

        .order-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
        }

        .order-detail-item {
            background: white;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

            .order-detail-item strong {
                color: #333;
            }

        @@media (max-width: 768px) {
            .form-row

        {
            flex-direction: column;
        }

        .header h1 {
            font-size: 2rem;
        }

        .step-container {
            margin: 10px 0;
            padding: 15px;
        }

        .order-details {
            grid-template-columns: 1fr;
        }

        }</style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🌾 Wheat Processing Management System</h1>
            <p>Complete Production Workflow Management</p>
        </div>

        <!-- Order Setup -->
        <div class="step-container">
            <div class="step-header">
                <div class="step-number">📋</div>
                <div class="step-title">Order Setup</div>
            </div>

            <div class="form-row">
                <div class="form-col">
                    <label for="orderQuantity">Order Quantity (tons)</label>
                    <input type="number" id="orderQuantity" min="1" step="0.1" value="10">
                </div>
                <div class="form-col">
                    <label for="finishedGoodsType">Finished Goods Type</label>
                    <select id="finishedGoodsType">
                        <option value="">Select Type</option>
                        <option value="Maida">Maida</option>
                        <option value="Atta">Atta</option>
                        <option value="Suji">Suji</option>
                        <option value="Rava">Rava</option>
                        <option value="Mixed Products">Mixed Products</option>
                        <option value="Custom">Custom</option>
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label for="orderDescription">Description</label>
                <textarea id="orderDescription" placeholder="Enter order description, specifications, or special requirements..."></textarea>
            </div>

            <button class="btn btn-primary" onclick="setupOrder()">Setup Order</button>
        </div>

        <!-- Step 1: Pre-cleaning to Conditioning -->
        <div class="step-container">
            <div class="step-header">
                <div class="step-number">1</div>
                <div class="step-title">Pre-cleaning to Conditioning Cleaning</div>
                <div class="status-indicator status-pending" id="step1Status">Pending</div>
            </div>

            <div class="form-group">
                <label for="orderSelect">Select Order</label>
                <select id="orderSelect" onchange="displaySelectedOrder()">
                    <option value="">Select an order to process</option>
                </select>
            </div>

            <div class="order-info hidden" id="selectedOrderInfo">
                <h4>Selected Order Details</h4>
                <div class="order-details" id="orderDetailsDisplay">
                    <!-- Order details will be displayed here -->
                </div>
            </div>

            <div class="form-row">
                <div class="form-col">
                    <label for="wheatPercentage">Wheat Percentage from Bin (%)</label>
                    <input type="number" id="wheatPercentage" min="1" max="100" step="0.1">
                </div>
                <div class="form-col">
                    <label for="conditioningDuration">Conditioning Duration</label>
                    <select id="conditioningDuration">
                        <option value="12">12 Hours</option>
                        <option value="24" selected>24 Hours</option>
                        <option value="custom">Custom Duration</option>
                    </select>
                </div>
            </div>

            <div class="form-row" id="customDurationRow" style="display: none;">
                <div class="form-col">
                    <label for="customHours">Custom Duration (hours)</label>
                    <input type="number" id="customHours" min="1" max="48" step="0.5">
                </div>
                <div class="form-col">
                    <label for="bufferTime">Buffer Time (minutes)</label>
                    <input type="number" id="bufferTime" min="0" max="120" value="30">
                </div>
            </div>

            <button class="btn btn-primary" onclick="startStep1()" id="step1Btn" disabled>Start Transfer</button>

            <div class="timer-display hidden" id="step1Timer">
                <h3>Conditioning Cleaning Progress</h3>
                <div class="timer-time" id="step1Time">00:00:00</div>
                <div class="progress-bar">
                    <div class="progress-fill" id="step1Progress"></div>
                </div>
            </div>

            <div class="form-group hidden" id="step1Complete">
                <div class="form-row">
                    <div class="form-col">
                        <label for="currentMoisture1">Current Moisture Level (%)</label>
                        <input type="number" id="currentMoisture1" min="0" max="30" step="0.1">
                    </div>
                    <div class="form-col">
                        <label for="step1BufferTime">Buffer Time (minutes)</label>
                        <input type="number" id="step1BufferTime" min="0" max="120" value="30">
                    </div>
                </div>
                <button class="btn btn-success" onclick="completeStep1()">Complete & Transfer to Next</button>
            </div>
        </div>

        <!-- Step 2: 12 Hours Cleaning Process -->
        <div class="step-container">
            <div class="step-header">
                <div class="step-number">2</div>
                <div class="step-title">12 Hours Cleaning Process</div>
                <div class="status-indicator status-pending" id="step2Status">Pending</div>
            </div>

            <div class="form-row">
                <div class="form-col">
                    <label for="targetMoisture">Target Moisture Level (%)</label>
                    <input type="number" id="targetMoisture" min="8" max="16" step="0.1" value="12">
                </div>
                <div class="form-col">
                    <label for="bufferTime2">Buffer Time (minutes)</label>
                    <input type="number" id="bufferTime2" min="0" max="120" value="30">
                </div>
            </div>

            <button class="btn btn-primary" onclick="startStep2()" id="step2Btn" disabled>Start 12-Hour Cleaning</button>

            <div class="timer-display hidden" id="step2Timer">
                <h3>12-Hour Cleaning Progress</h3>
                <div class="timer-time" id="step2Time">00:00:00</div>
                <div class="progress-bar">
                    <div class="progress-fill" id="step2Progress"></div>
                </div>
            </div>

            <div class="form-group hidden" id="step2Complete">
                <label for="finalMoisture">Final Moisture Level (%)</label>
                <input type="number" id="finalMoisture" min="0" max="30" step="0.1">
                <div id="moistureCheck" class="form-group"></div>
                <button class="btn btn-success" onclick="completeStep2()">Complete & Transfer to Grinding</button>
            </div>
        </div>

        <!-- Step 3: Grinding with Magnet Cleaning -->
        <div class="step-container">
            <div class="step-header">
                <div class="step-number">3</div>
                <div class="step-title">Grinding Process & Magnet Cleaning</div>
                <div class="status-indicator status-pending" id="step3Status">Pending</div>
            </div>

            <div class="form-group">
                <label>Magnet Cleaning (Every Hour)</label>
                <div class="file-upload" id="magnetUpload">
                    <p>📸 Upload Before & After Pictures of Magnets</p>
                    <input type="file" id="magnetImages" multiple accept="image/*" style="display: none;">
                </div>
                <div id="magnetPreview"></div>
            </div>

            <button class="btn btn-primary" onclick="startStep3()" id="step3Btn" disabled>Start Grinding Process</button>
            <button class="btn btn-warning" onclick="uploadMagnetImages()" id="magnetCleanBtn" style="display: none;">Clean Magnets</button>

            <div class="timer-display hidden" id="step3Timer">
                <h3>Next Magnet Cleaning In:</h3>
                <div class="timer-time" id="magnetTimer">01:00:00</div>
            </div>

            <button class="btn btn-success" onclick="completeStep3()" id="step3CompleteBtn" style="display: none;">Complete Grinding</button>
        </div>

        <!-- Step 4: Product Categorization -->
        <div class="step-container">
            <div class="step-header">
                <div class="step-number">4</div>
                <div class="step-title">Product Categorization & Output</div>
                <div class="status-indicator status-pending" id="step4Status">Pending</div>
            </div>

            <div class="form-group">
                <h4>Product Configuration</h4>
                <div class="form-row">
                    <div class="form-col">
                        <label>
                            <input type="checkbox" id="produceRava"> Produce Rava
                        </label>
                        <input type="number" id="ravaPercentage" placeholder="Percentage" min="0" max="100" disabled>
                    </div>
                    <div class="form-col">
                        <label>
                            <input type="checkbox" id="produceChiroti"> Produce Chiroti
                        </label>
                        <input type="number" id="chirotiPercentage" placeholder="Percentage" min="0" max="100" disabled>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <h4>Expected Output Range</h4>
                <div class="form-row">
                    <div class="form-col">
                        <label>Products (Maida, Suji, etc.) - 75-77%</label>
                        <div class="form-row">
                            <input type="number" id="minProducts" placeholder="Min %" value="75" readonly>
                            <input type="number" id="maxProducts" placeholder="Max %" value="77" readonly>
                        </div>
                    </div>
                    <div class="form-col">
                        <label>Bran - 23-25%</label>
                        <div class="form-row">
                            <input type="number" id="minBran" placeholder="Min %" value="23" readonly>
                            <input type="number" id="maxBran" placeholder="Max %" value="25" readonly>
                        </div>
                    </div>
                </div>
            </div>

            <button class="btn btn-primary" onclick="startStep4()" id="step4Btn" disabled>Start Production</button>

            <div class="production-summary hidden" id="productionSummary">
                <h4>Production Summary</h4>
                <div id="summaryDetails"></div>
                <button class="btn btn-success" onclick="completeProduction()">Complete Production</button>
            </div>
        </div>

        <!-- Overall Progress -->
        <div class="step-container">
            <div class="step-header">
                <div class="step-number">📊</div>
                <div class="step-title">Production Overview</div>
            </div>

            <div id="overallProgress">
                <div class="summary-item">
                    <span>Order Status:</span>
                    <span id="orderStatus">Not Started</span>
                </div>
                <div class="summary-item">
                    <span>Total Processing Time:</span>
                    <span id="totalTime">00:00:00</span>
                </div>
                <div class="summary-item">
                    <span>Current Step:</span>
                    <span id="currentStep">Order Setup</span>
                </div>
            </div>
        </div>
    </div>

    <div class="notification" id="notification"></div>

    <script>
        // Global variables
        let orderData = {};
        let allOrders = []; // Store all orders
        let timers = {};
        let intervals = {};
        let processStartTime = null;
        let selectedOrderId = null;

        // Utility functions
        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type} show`;

            setTimeout(() => {
                notification.classList.remove('show');
            }, 4000);
        }

        function formatTime(seconds) {
            const hours = Math.floor(seconds / 3600);
            const mins = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }

        function updateStatus(stepId, status) {
            const statusElement = document.getElementById(`${stepId}Status`);
            statusElement.textContent = status;
            statusElement.className = `status-indicator status-${status.toLowerCase()}`;
        }

        function generateOrderId() {
            return 'ORD-' + Date.now().toString().slice(-8);
        }

        function saveData() {
            const data = {
                orderData,
                allOrders,
                timers,
                processStartTime,
                selectedOrderId,
                timestamp: Date.now()
            };
            localStorage.setItem('wheatProcessingData', JSON.stringify(data));
        }

        function loadData() {
            const saved = localStorage.getItem('wheatProcessingData');
            if (saved) {
                const data = JSON.parse(saved);
                orderData = data.orderData || {};
                allOrders = data.allOrders || [];
                timers = data.timers || {};
                processStartTime = data.processStartTime;
                selectedOrderId = data.selectedOrderId;

                // Populate order dropdown
                populateOrderDropdown();
            }
        }

        function populateOrderDropdown() {
            const orderSelect = document.getElementById('orderSelect');
            orderSelect.innerHTML = '<option value="">Select an order to process</option>';

            // Filter for pending orders only
            const pendingOrders = allOrders.filter(order => order.status === 'pending');

            pendingOrders.forEach(order => {
                const option = document.createElement('option');
                option.value = order.id;
                option.textContent = `${order.id} - ${order.quantity}t - ${order.finishedGoodsType}`;
                orderSelect.appendChild(option);
            });

            // Restore selected order if exists
            if (selectedOrderId) {
                orderSelect.value = selectedOrderId;
                displaySelectedOrder();
            }
        }

        function displaySelectedOrder() {
            const orderSelect = document.getElementById('orderSelect');
            const selectedId = orderSelect.value;
            const orderInfo = document.getElementById('selectedOrderInfo');
            const orderDetailsDisplay = document.getElementById('orderDetailsDisplay');

            if (!selectedId) {
                orderInfo.classList.add('hidden');
                document.getElementById('step1Btn').disabled = true;
                selectedOrderId = null;
                return;
            }

            const selectedOrder = allOrders.find(order => order.id === selectedId);
            if (!selectedOrder) return;

            selectedOrderId = selectedId;
            orderData = selectedOrder; // Set current order data

            // Display order details
            orderDetailsDisplay.innerHTML = `
                <div class="order-detail-item">
                    <strong>Order ID:</strong><br>
                    ${selectedOrder.id}
                </div>
                <div class="order-detail-item">
                    <strong>Quantity:</strong><br>
                    ${selectedOrder.quantity} tons
                </div>
                <div class="order-detail-item">
                    <strong>Finished Goods Type:</strong><br>
                    ${selectedOrder.finishedGoodsType}
                </div>
                <div class="order-detail-item">
                    <strong>Description:</strong><br>
                    ${selectedOrder.description || 'No description provided'}
                </div>
                <div class="order-detail-item">
                    <strong>Created:</strong><br>
                    ${new Date(selectedOrder.startTime).toLocaleString()}
                </div>
                <div class="order-detail-item">
                    <strong>Status:</strong><br>
                    <span class="status-indicator status-${selectedOrder.status}">${selectedOrder.status}</span>
                </div>
            `;

            orderInfo.classList.remove('hidden');
            document.getElementById('step1Btn').disabled = false;

            saveData();
        }

        // Order Setup
        function setupOrder() {
            const quantity = parseFloat(document.getElementById('orderQuantity').value);
            const finishedGoodsType = document.getElementById('finishedGoodsType').value;
            const description = document.getElementById('orderDescription').value;

            if (!quantity || quantity <= 0) {
                showNotification('Please enter a valid order quantity', 'error');
                return;
            }

            if (!finishedGoodsType) {
                showNotification('Please select finished goods type', 'error');
                return;
            }

            const newOrder = {
                id: generateOrderId(),
                quantity,
                finishedGoodsType,
                description,
                startTime: new Date().toISOString(),
                status: 'pending',
                steps: {}
            };

            allOrders.push(newOrder);
            populateOrderDropdown();

            // Clear form
            document.getElementById('orderQuantity').value = '';
            document.getElementById('finishedGoodsType').value = '';
            document.getElementById('orderDescription').value = '';

            saveData();
            showNotification(`Order ${newOrder.id} created successfully for ${quantity} tons of ${finishedGoodsType}`);
        }

        // Step 1: Pre-cleaning to Conditioning
        function startStep1() {
            if (!selectedOrderId || !orderData.id) {
                showNotification('Please select an order first', 'error');
                return;
            }

            const percentage = parseFloat(document.getElementById('wheatPercentage').value);
            const duration = document.getElementById('conditioningDuration').value;
            const customHours = parseFloat(document.getElementById('customHours').value);
            const bufferTime = parseInt(document.getElementById('bufferTime').value) || 30;

            if (!percentage || percentage <= 0 || percentage > 100) {
                showNotification('Please enter a valid wheat percentage (1-100%)', 'error');
                return;
            }

            let durationHours;
            if (duration === 'custom') {
                if (!customHours || customHours <= 0) {
                    showNotification('Please enter valid custom duration', 'error');
                    return;
                }
                durationHours = customHours;
            } else {
                durationHours = parseInt(duration);
            }

            const wheatAmount = (orderData.quantity * percentage) / 100;

            // Update order status
            const orderIndex = allOrders.findIndex(order => order.id === selectedOrderId);
            if (orderIndex !== -1) {
                allOrders[orderIndex].status = 'in-progress';
                allOrders[orderIndex].steps.step1 = {
                    wheatPercentage: percentage,
                    wheatAmount,
                    duration: durationHours,
                    bufferTime,
                    startTime: new Date().toISOString(),
                    status: 'active'
                };
                orderData = allOrders[orderIndex];
            }

            // Start timer
            const totalSeconds = durationHours * 3600;
            timers.step1 = {
                total: totalSeconds,
                remaining: totalSeconds,
                startTime: Date.now()
            };

            updateStatus('step1', 'Active');
            document.getElementById('step1Btn').disabled = true;
            document.getElementById('step1Timer').classList.remove('hidden');
            document.getElementById('orderSelect').disabled = true; // Prevent changing order during processing

            // Set up timer interval
            intervals.step1 = setInterval(() => updateTimer('step1'), 1000);

            // Set up notifications
            setTimeout(() => showNotification('30 minutes remaining for conditioning cleaning', 'warning'), (totalSeconds - 1800) * 1000);
            setTimeout(() => showNotification('15 minutes remaining for conditioning cleaning', 'warning'), (totalSeconds - 900) * 1000);
            setTimeout(() => showNotification('5 minutes remaining for conditioning cleaning', 'warning'), (totalSeconds - 300) * 1000);
            setTimeout(() => {
                showNotification('Conditioning cleaning completed! Please capture moisture level', 'success');
                document.getElementById('step1Complete').classList.remove('hidden');
                clearInterval(intervals.step1);
            }, totalSeconds * 1000);

            processStartTime = Date.now();
            document.getElementById('orderStatus').textContent = 'In Progress';
            document.getElementById('currentStep').textContent = 'Step 1: Pre-cleaning';

            saveData();
            showNotification(`Started conditioning cleaning for ${wheatAmount.toFixed(2)} tons`);
        }

        function updateTimer(stepId) {
            const timer = timers[stepId];
            if (!timer) return;

            const elapsed = Math.floor((Date.now() - timer.startTime) / 1000);
            const remaining = Math.max(0, timer.total - elapsed);

            document.getElementById(`${stepId}Time`).textContent = formatTime(remaining);

            const progress = ((timer.total - remaining) / timer.total) * 100;
            document.getElementById(`${stepId}Progress`).style.width = `${progress}%`;

            if (remaining === 0) {
                clearInterval(intervals[stepId]);
            }
        }

        function completeStep1() {
            const moisture = parseFloat(document.getElementById('currentMoisture1').value);
            const bufferTime = parseInt(document.getElementById('step1BufferTime').value) || 30;

            if (!moisture || moisture <= 0) {
                showNotification('Please enter current moisture level', 'error');
                return;
            }

            // Update order in allOrders array
            const orderIndex = allOrders.findIndex(order => order.id === selectedOrderId);
            if (orderIndex !== -1) {
                allOrders[orderIndex].steps.step1.endTime = new Date().toISOString();
                allOrders[orderIndex].steps.step1.currentMoisture = moisture;
                allOrders[orderIndex].steps.step1.bufferTime = bufferTime;
                allOrders[orderIndex].steps.step1.status = 'completed';
                orderData = allOrders[orderIndex];
            }

            updateStatus('step1', 'Completed');
            document.getElementById('step2Btn').disabled = false;
            document.getElementById('currentStep').textContent = 'Step 2: 12-Hour Cleaning';

            saveData();
            showNotification('Step 1 completed successfully!');
        }

        // Step 2: 12 Hours Cleaning
        function startStep2() {
            const targetMoisture = parseFloat(document.getElementById('targetMoisture').value);
            const bufferTime = parseInt(document.getElementById('bufferTime2').value) || 30;

            if (!targetMoisture || targetMoisture <= 0) {
                showNotification('Please enter target moisture level', 'error');
                return;
            }

            // Update order in allOrders array
            const orderIndex = allOrders.findIndex(order => order.id === selectedOrderId);
            if (orderIndex !== -1) {
                allOrders[orderIndex].steps.step2 = {
                    targetMoisture,
                    bufferTime,
                    startTime: new Date().toISOString(),
                    status: 'active'
                };
                orderData = allOrders[orderIndex];
            }

            const totalSeconds = 12 * 3600; // 12 hours
            timers.step2 = {
                total: totalSeconds,
                remaining: totalSeconds,
                startTime: Date.now()
            };

            updateStatus('step2', 'Active');
            document.getElementById('step2Btn').disabled = true;
            document.getElementById('step2Timer').classList.remove('hidden');

            intervals.step2 = setInterval(() => updateTimer('step2'), 1000);

            // Set up notifications
            setTimeout(() => showNotification('30 minutes remaining for 12-hour cleaning', 'warning'), (totalSeconds - 1800) * 1000);
            setTimeout(() => showNotification('15 minutes remaining for 12-hour cleaning', 'warning'), (totalSeconds - 900) * 1000);
            setTimeout(() => showNotification('5 minutes remaining for 12-hour cleaning', 'warning'), (totalSeconds - 300) * 1000);
            setTimeout(() => {
                showNotification('12-hour cleaning completed! Please capture final moisture level', 'success');
                document.getElementById('step2Complete').classList.remove('hidden');
                clearInterval(intervals.step2);
            }, totalSeconds * 1000);

            saveData();
            showNotification('Started 12-hour cleaning process');
        }

        function completeStep2() {
            const finalMoisture = parseFloat(document.getElementById('finalMoisture').value);
            const targetMoisture = orderData.steps.step2.targetMoisture;

            if (!finalMoisture || finalMoisture <= 0) {
                showNotification('Please enter final moisture level', 'error');
                return;
            }

            // Update order in allOrders array
            const orderIndex = allOrders.findIndex(order => order.id === selectedOrderId);
            if (orderIndex !== -1) {
                allOrders[orderIndex].steps.step2.endTime = new Date().toISOString();
                allOrders[orderIndex].steps.step2.finalMoisture = finalMoisture;
                allOrders[orderIndex].steps.step2.status = 'completed';
                orderData = allOrders[orderIndex];
            }

            // Check moisture target
            const moistureCheck = document.getElementById('moistureCheck');
            if (Math.abs(finalMoisture - targetMoisture) <= 0.5) {
                moistureCheck.innerHTML = '<div style="color: green;">✅ Moisture target achieved!</div>';
            } else {
                moistureCheck.innerHTML = '<div style="color: orange;">⚠️ Moisture slightly off target</div>';
            }

            updateStatus('step2', 'Completed');
            document.getElementById('step3Btn').disabled = false;
            document.getElementById('currentStep').textContent = 'Step 3: Grinding Process';

            saveData();
            showNotification('Step 2 completed successfully!');
        }

        // Step 3: Grinding Process
        function startStep3() {
            // Update order in allOrders array
            const orderIndex = allOrders.findIndex(order => order.id === selectedOrderId);
            if (orderIndex !== -1) {
                allOrders[orderIndex].steps.step3 = {
                    startTime: new Date().toISOString(),
                    status: 'active',
                    magnetCleanings: []
                };
                orderData = allOrders[orderIndex];
            }

            updateStatus('step3', 'Active');
            document.getElementById('step3Btn').disabled = true;
            document.getElementById('magnetCleanBtn').style.display = 'inline-block';
            document.getElementById('step3CompleteBtn').style.display = 'inline-block';
            document.getElementById('step3Timer').classList.remove('hidden');

            // Start hourly magnet cleaning timer
            startMagnetTimer();

            saveData();
            showNotification('Grinding process started. Remember to clean magnets every hour!');
        }

        function startMagnetTimer() {
            const totalSeconds = 3600; // 1 hour
            timers.magnet = {
                total: totalSeconds,
                remaining: totalSeconds,
                startTime: Date.now()
            };

            intervals.magnet = setInterval(() => {
                const timer = timers.magnet;
                const elapsed = Math.floor((Date.now() - timer.startTime) / 1000);
                const remaining = Math.max(0, timer.total - elapsed);

                document.getElementById('magnetTimer').textContent = formatTime(remaining);

                if (remaining === 0) {
                    showNotification('Time to clean magnets! Upload before and after pictures.', 'warning');
                    startMagnetTimer(); // Restart timer for next hour
                }
            }, 1000);
        }

        function uploadMagnetImages() {
            document.getElementById('magnetImages').click();
        }

        function completeStep3() {
            // Update order in allOrders array
            const orderIndex = allOrders.findIndex(order => order.id === selectedOrderId);
            if (orderIndex !== -1) {
                allOrders[orderIndex].steps.step3.endTime = new Date().toISOString();
                allOrders[orderIndex].steps.step3.status = 'completed';
                orderData = allOrders[orderIndex];
            }

            clearInterval(intervals.magnet);
            updateStatus('step3', 'Completed');
            document.getElementById('step4Btn').disabled = false;
            document.getElementById('currentStep').textContent = 'Step 4: Product Categorization';

            saveData();
            showNotification('Grinding process completed successfully!');
        }

        // Step 4: Product Categorization
        function startStep4() {
            const produceRava = document.getElementById('produceRava').checked;
            const produceChiroti = document.getElementById('produceChiroti').checked;
            const ravaPercentage = parseFloat(document.getElementById('ravaPercentage').value) || 0;
            const chirotiPercentage = parseFloat(document.getElementById('chirotiPercentage').value) || 0;

            let totalSpecialProducts = 0;
            if (produceRava) totalSpecialProducts += ravaPercentage;
            if (produceChiroti) totalSpecialProducts += chirotiPercentage;

            if (totalSpecialProducts > 20) {
                showNotification('Total special products cannot exceed 20% of total production', 'error');
                return;
            }

            // Update order in allOrders array
            const orderIndex = allOrders.findIndex(order => order.id === selectedOrderId);
            if (orderIndex !== -1) {
                allOrders[orderIndex].steps.step4 = {
                    startTime: new Date().toISOString(),
                    status: 'active',
                    produceRava,
                    produceChiroti,
                    ravaPercentage,
                    chirotiPercentage
                };
                orderData = allOrders[orderIndex];
            }

            // Calculate production output
            const totalQuantity = orderData.quantity * 1000; // Convert to kg
            const branPercentage = Math.random() * (25 - 23) + 23; // Random between 23-25%
            const productsPercentage = 100 - branPercentage;

            const branOutput = (totalQuantity * branPercentage) / 100;
            const productsOutput = (totalQuantity * productsPercentage) / 100;

            let ravaOutput = 0;
            let chirotiOutput = 0;
            let maidaOutput = productsOutput;

            if (produceRava) {
                ravaOutput = (totalQuantity * ravaPercentage) / 100;
                maidaOutput -= ravaOutput;
            }

            if (produceChiroti) {
                chirotiOutput = (totalQuantity * chirotiPercentage) / 100;
                maidaOutput -= chirotiOutput;
            }

            // Update order with output data
            const orderIndex2 = allOrders.findIndex(order => order.id === selectedOrderId);
            if (orderIndex2 !== -1) {
                allOrders[orderIndex2].steps.step4.output = {
                    totalQuantity,
                    branOutput: branOutput.toFixed(2),
                    maidaOutput: maidaOutput.toFixed(2),
                    ravaOutput: ravaOutput.toFixed(2),
                    chirotiOutput: chirotiOutput.toFixed(2),
                    branPercentage: branPercentage.toFixed(2),
                    productsPercentage: productsPercentage.toFixed(2)
                };
                orderData = allOrders[orderIndex2];
            }

            updateStatus('step4', 'Active');
            document.getElementById('step4Btn').disabled = true;
            displayProductionSummary();

            saveData();
            showNotification('Production started successfully!');
        }

        function displayProductionSummary() {
            const output = orderData.steps.step4.output;
            const summaryDiv = document.getElementById('summaryDetails');

            let summaryHTML = `
                <div class="summary-item">
                    <span><strong>Total Input:</strong></span>
                    <span>${(output.totalQuantity/1000).toFixed(2)} tons</span>
                </div>
                <div class="summary-item">
                    <span><strong>Maida & Other Products:</strong></span>
                    <span>${(output.maidaOutput/1000).toFixed(2)} tons (${output.productsPercentage}%)</span>
                </div>
                <div class="summary-item">
                    <span><strong>Bran:</strong></span>
                    <span>${(output.branOutput/1000).toFixed(2)} tons (${output.branPercentage}%)</span>
                </div>
            `;

            if (orderData.steps.step4.produceRava && parseFloat(output.ravaOutput) > 0) {
                summaryHTML += `
                    <div class="summary-item">
                        <span><strong>Rava:</strong></span>
                        <span>${(output.ravaOutput/1000).toFixed(2)} tons</span>
                    </div>
                `;
            }

            if (orderData.steps.step4.produceChiroti && parseFloat(output.chirotiOutput) > 0) {
                summaryHTML += `
                    <div class="summary-item">
                        <span><strong>Chiroti:</strong></span>
                        <span>${(output.chirotiOutput/1000).toFixed(2)} tons</span>
                    </div>
                `;
            }

            // Quality check
            const branPercent = parseFloat(output.branPercentage);
            const qualityStatus = (branPercent >= 23 && branPercent <= 25) ?
                '<span style="color: green;">✅ Within expected range</span>' :
                '<span style="color: orange;">⚠️ Outside expected range</span>';

            summaryHTML += `
                <div class="summary-item">
                    <span><strong>Quality Status:</strong></span>
                    <span>${qualityStatus}</span>
                </div>
            `;

            summaryDiv.innerHTML = summaryHTML;
            document.getElementById('productionSummary').classList.remove('hidden');
        }

        function completeProduction() {
            // Update order in allOrders array
            const orderIndex = allOrders.findIndex(order => order.id === selectedOrderId);
            if (orderIndex !== -1) {
                allOrders[orderIndex].steps.step4.endTime = new Date().toISOString();
                allOrders[orderIndex].steps.step4.status = 'completed';
                allOrders[orderIndex].completedTime = new Date().toISOString();
                allOrders[orderIndex].status = 'completed';
                orderData = allOrders[orderIndex];
            }

            updateStatus('step4', 'Completed');
            document.getElementById('orderStatus').textContent = 'Completed';
            document.getElementById('currentStep').textContent = 'Production Complete';
            document.getElementById('orderSelect').disabled = false; // Re-enable order selection

            // Calculate total processing time
            if (processStartTime) {
                const totalTimeMs = Date.now() - processStartTime;
                const totalTimeFormatted = formatTime(Math.floor(totalTimeMs / 1000));
                document.getElementById('totalTime').textContent = totalTimeFormatted;
            }

            // Refresh order dropdown to remove completed order
            populateOrderDropdown();

            // Clear current selection
            selectedOrderId = null;
            document.getElementById('selectedOrderInfo').classList.add('hidden');

            saveData();
            showNotification(`🎉 Order ${orderData.id} production finished successfully!`, 'success');

            // Generate production report
            generateProductionReport();
        }

        function generateProductionReport() {
            const report = {
                orderDetails: {
                    id: orderData.id,
                    quantity: orderData.quantity,
                    finishedGoodsType: orderData.finishedGoodsType,
                    description: orderData.description,
                    startTime: orderData.startTime,
                    completedTime: orderData.completedTime
                },
                processDetails: {
                    step1: orderData.steps.step1,
                    step2: orderData.steps.step2,
                    step3: orderData.steps.step3,
                    step4: orderData.steps.step4
                },
                summary: orderData.steps.step4.output
            };

            localStorage.setItem(`productionReport_${orderData.id}_${Date.now()}`, JSON.stringify(report));
            console.log('Production Report Generated:', report);
        }

        // File upload handlers
        document.getElementById('magnetUpload').addEventListener('click', () => {
            document.getElementById('magnetImages').click();
        });

        document.getElementById('magnetImages').addEventListener('change', function(e) {
            const files = e.target.files;
            const preview = document.getElementById('magnetPreview');
            preview.innerHTML = '';

            for (let file of files) {
                if (file.type.startsWith('image/')) {
                    const img = document.createElement('img');
                    img.src = URL.createObjectURL(file);
                    img.className = 'image-preview';
                    img.alt = file.name;
                    preview.appendChild(img);
                }
            }

            // Save magnet cleaning record
            if (orderData.steps && orderData.steps.step3) {
                const cleaningRecord = {
                    timestamp: new Date().toISOString(),
                    imageCount: files.length
                };

                const orderIndex = allOrders.findIndex(order => order.id === selectedOrderId);
                if (orderIndex !== -1) {
                    allOrders[orderIndex].steps.step3.magnetCleanings.push(cleaningRecord);
                    orderData = allOrders[orderIndex];
                }

                saveData();
                showNotification(`Magnet cleaning recorded with ${files.length} images`);
            }
        });

        // Drag and drop for file upload
        const uploadArea = document.getElementById('magnetUpload');

        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');

            const files = e.dataTransfer.files;
            document.getElementById('magnetImages').files = files;
            document.getElementById('magnetImages').dispatchEvent(new Event('change'));
        });

        // Conditioning duration change handler
        document.getElementById('conditioningDuration').addEventListener('change', function() {
            const customRow = document.getElementById('customDurationRow');
            if (this.value === 'custom') {
                customRow.style.display = 'flex';
            } else {
                customRow.style.display = 'none';
            }
        });

        // Product checkboxes handlers
        document.getElementById('produceRava').addEventListener('change', function() {
            document.getElementById('ravaPercentage').disabled = !this.checked;
            if (!this.checked) {
                document.getElementById('ravaPercentage').value = '';
            }
        });

        document.getElementById('produceChiroti').addEventListener('change', function() {
            document.getElementById('chirotiPercentage').disabled = !this.checked;
            if (!this.checked) {
                document.getElementById('chirotiPercentage').value = '';
            }
        });

        // Total time update function
        function updateTotalTime() {
            if (processStartTime) {
                const totalTimeMs = Date.now() - processStartTime;
                const totalTimeFormatted = formatTime(Math.floor(totalTimeMs / 1000));
                document.getElementById('totalTime').textContent = totalTimeFormatted;
            }
        }

        // Update total time every second
        setInterval(updateTotalTime, 1000);

        // Initialize application
        function initializeApp() {
            loadData();

            // Restore any active timers if page was refreshed
            Object.keys(timers).forEach(stepId => {
                const timer = timers[stepId];
                if (timer && timer.startTime) {
                    const elapsed = Math.floor((Date.now() - timer.startTime) / 1000);
                    if (elapsed < timer.total) {
                        intervals[stepId] = setInterval(() => updateTimer(stepId), 1000);
                    }
                }
            });

            // Set initial state
            if (!selectedOrderId) {
                document.getElementById('orderStatus').textContent = 'Not Started';
                document.getElementById('currentStep').textContent = 'Order Setup';
            }
        }

        // Clear all data function (for testing/reset)
        function clearAllData() {
            if (confirm('Are you sure you want to clear all production data? This cannot be undone.')) {
                localStorage.removeItem('wheatProcessingData');
                Object.values(intervals).forEach(clearInterval);
                location.reload();
            }
        }

        // Add reset button to the page
        window.addEventListener('load', () => {
            const resetBtn = document.createElement('button');
            resetBtn.textContent = '🔄 Reset All Data';
            resetBtn.className = 'btn btn-warning';
            resetBtn.style.position = 'fixed';
            resetBtn.style.bottom = '20px';
            resetBtn.style.right = '20px';
            resetBtn.style.zIndex = '1000';
            resetBtn.onclick = clearAllData;
            document.body.appendChild(resetBtn);
        });

        // Initialize the application when page loads
        window.addEventListener('load', initializeApp);

        // Save data before page unload
        window.addEventListener('beforeunload', saveData);

        // Export/Import functionality
        function exportData() {
            const data = localStorage.getItem('wheatProcessingData');
            if (data) {
                const blob = new Blob([data], { type: 'application/json' });
                const url = URL.createObjectURL(blob);

                const a = document.createElement('a');
                a.href = url;
                a.download = `wheat_processing_${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);

                showNotification('Data exported successfully!');
            } else {
                showNotification('No data to export', 'warning');
            }
        }

        function importData(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const data = JSON.parse(e.target.result);
                        localStorage.setItem('wheatProcessingData', JSON.stringify(data));
                        showNotification('Data imported successfully! Please refresh the page.');
                    } catch (error) {
                        showNotification('Invalid file format', 'error');
                    }
                };
                reader.readAsText(file);
            }
        }

        // Add export/import buttons
        window.addEventListener('load', () => {
            const exportBtn = document.createElement('button');
            exportBtn.textContent = '📤 Export Data';
            exportBtn.className = 'btn btn-primary';
            exportBtn.style.position = 'fixed';
            exportBtn.style.bottom = '70px';
            exportBtn.style.right = '20px';
            exportBtn.style.zIndex = '1000';
            exportBtn.onclick = exportData;
            document.body.appendChild(exportBtn);

            const importInput = document.createElement('input');
            importInput.type = 'file';
            importInput.accept = '.json';
            importInput.style.display = 'none';
            importInput.onchange = importData;
            document.body.appendChild(importInput);

            const importBtn = document.createElement('button');
            importBtn.textContent = '📥 Import Data';
            importBtn.className = 'btn btn-primary';
            importBtn.style.position = 'fixed';
            importBtn.style.bottom = '120px';
            importBtn.style.right = '20px';
            importBtn.style.zIndex = '1000';
            importBtn.onclick = () => importInput.click();
            document.body.appendChild(importBtn);
        });

    </script>
</body>
</html>