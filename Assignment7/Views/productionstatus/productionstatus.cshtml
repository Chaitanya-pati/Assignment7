<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wheat Management System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

            .header h1 {
                color: #2c3e50;
                font-size: 2.5em;
                margin-bottom: 10px;
            }

            .header p {
                color: #7f8c8d;
                font-size: 1.1em;
            }

        .nav-tabs {
            display: flex;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            padding: 5px;
            margin-bottom: 30px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .nav-tab {
            flex: 1;
            padding: 15px;
            text-align: center;
            background: transparent;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1em;
            font-weight: 500;
        }

            .nav-tab.active {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            }

            .nav-tab:hover:not(.active) {
                background: rgba(102, 126, 234, 0.1);
            }

        .tab-content {
            display: none;
        }

            .tab-content.active {
                display: block;
            }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            transition: transform 0.3s ease;
        }

            .card:hover {
                transform: translateY(-5px);
            }

            .card h3 {
                color: #2c3e50;
                margin-bottom: 15px;
                font-size: 1.3em;
            }

        .status-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 500;
            text-transform: uppercase;
        }

        .status-created {
            background: #e8f4fd;
            color: #1e88e5;
        }

        .status-precleaning {
            background: #fff3e0;
            color: #ff9800;
        }

        .status-condense {
            background: #f3e5f5;
            color: #9c27b0;
        }

        .status-milly {
            background: #e8f5e8;
            color: #4caf50;
        }

        .status-processing {
            background: #fff8e1;
            color: #ffc107;
        }

        .status-ready {
            background: #e8f5e8;
            color: #2e7d32;
        }

        .status-completed {
            background: #f5f5f5;
            color: #616161;
        }

        .form-group {
            margin-bottom: 20px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: 500;
                color: #2c3e50;
            }

            .form-group input, .form-group select {
                width: 100%;
                padding: 12px;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                font-size: 1em;
                transition: border-color 0.3s ease;
            }

                .form-group input:focus, .form-group select:focus {
                    outline: none;
                    border-color: #667eea;
                }

        .form-row {
            display: flex;
            gap: 15px;
        }

            .form-row .form-group {
                flex: 1;
            }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 500;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
            }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-warning {
            background: #ffc107;
            color: #212529;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-small {
            padding: 8px 15px;
            font-size: 0.9em;
        }

        .table-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

            .table th, .table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #e0e0e0;
            }

            .table th {
                background: #f8f9fa;
                font-weight: 600;
                color: #2c3e50;
            }

            .table tr:hover {
                background: rgba(102, 126, 234, 0.05);
            }

        .bin-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .bin-item {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

            .bin-item.occupied {
                background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            }

            .bin-item.available {
                background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            transition: width 0.3s ease;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .close {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 28px;
            cursor: pointer;
            color: #999;
        }

            .close:hover {
                color: #333;
            }

        .inventory-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin-bottom: 10px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
        }

        .inventory-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .inventory-controls input {
                width: 80px;
                padding: 5px;
                border: 1px solid #ddd;
                border-radius: 4px;
                text-align: center;
            }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 8px;
            border-left: 4px solid;
        }

        .alert-info {
            background: #e8f4fd;
            border-color: #1e88e5;
            color: #1565c0;
        }

        .alert-warning {
            background: #fff8e1;
            border-color: #ffc107;
            color: #f57c00;
        }

        .alert-success {
            background: #e8f5e8;
            border-color: #4caf50;
            color: #2e7d32;
        }

        @@media (max-width: 768px) {
            .nav-tabs

        {
            flex-direction: column;
        }

        .dashboard-grid {
            grid-template-columns: 1fr;
        }

        .form-row {
            flex-direction: column;
        }

        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🌾 Wheat Management System</h1>
            <p>Complete Storage & Cleaning Process Management</p>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('dashboard')">Dashboard</button>
            <button class="nav-tab" onclick="showTab('orders')">Orders</button>
            <button class="nav-tab" onclick="showTab('inventory')">Inventory</button>
            <button class="nav-tab" onclick="showTab('bins')">Bins Management</button>
            <button class="nav-tab" onclick="showTab('process')">Process Flow</button>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content active">
            <div class="dashboard-grid">
                <div class="card">
                    <h3>📊 Today's Overview</h3>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                        <span>Total Orders:</span>
                        <strong id="totalOrders">0</strong>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                        <span>Active Orders:</span>
                        <strong id="activeOrders">0</strong>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                        <span>Completed:</span>
                        <strong id="completedOrders">0</strong>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>Total Tonnage:</span>
                        <strong id="totalTonnage">0t</strong>
                    </div>
                </div>

                <div class="card">
                    <h3>⏰ Current Processing</h3>
                    <div id="currentProcessing">
                        <p style="color: #666; text-align: center; margin-top: 20px;">No orders currently processing</p>
                    </div>
                </div>

                <div class="card">
                    <h3>🏭 Bin Utilization</h3>
                    <div style="margin-bottom: 15px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <span>Precleaning Bins:</span>
                            <span id="precleaningUtil">0/5</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" id="precleaningProgress" style="width: 0%"></div>
                        </div>
                    </div>
                    <div style="margin-bottom: 15px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <span>Condense Bins:</span>
                            <span id="condenseUtil">0/4</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" id="condenseProgress" style="width: 0%"></div>
                        </div>
                    </div>
                    <div>
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <span>Milly Bins:</span>
                            <span id="millyUtil">0/4</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" id="millyProgress" style="width: 0%"></div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>🚀 Quick Actions</h3>
                    <button class="btn btn-primary" onclick="showModal('newOrderModal')" style="width: 100%; margin-bottom: 10px;">
                        ➕ New Order
                    </button>
                    <button class="btn btn-secondary" onclick="showModal('inventoryModal')" style="width: 100%; margin-bottom: 10px;">
                        📦 Manage Inventory
                    </button>
                    <button class="btn btn-success" onclick="showTab('bins')" style="width: 100%;">
                        🔍 Manage Bins
                    </button>
                </div>
            </div>
        </div>

        <!-- Orders Tab -->
        <div id="orders" class="tab-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h2>📋 Order Management</h2>
                <button class="btn btn-primary" onclick="showModal('newOrderModal')">
                    ➕ New Order
                </button>
            </div>

            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Quantity</th>
                            <th>Mix (%)</th>
                            <th>Current Stage</th>
                            <th>Bin No.</th>
                            <th>Progress</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ordersTable">
                        <!-- Orders will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Inventory Tab -->
        <div id="inventory" class="tab-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h2>📦 Godown Inventory Management</h2>
                <button class="btn btn-primary" onclick="showModal('inventoryModal')">
                    ➕ Update Stock
                </button>
            </div>

            <div class="alert alert-info">
                <strong>Note:</strong> Godown storage has unlimited capacity. Manage your wheat stock by category below.
            </div>

            <div class="dashboard-grid">
                <div class="card">
                    <h3>HD (High Density)</h3>
                    <div style="font-size: 2em; text-align: center; margin: 20px 0;">
                        <span id="hdStock">0</span>t
                    </div>
                    <div style="text-align: center; color: #666;">Unlimited Capacity</div>
                    <button class="btn btn-warning btn-small" onclick="updateStock('HD')" style="width: 100%; margin-top: 10px;">
                        Update Stock
                    </button>
                </div>
                <div class="card">
                    <h3>LMQ (Low Milk Quality)</h3>
                    <div style="font-size: 2em; text-align: center; margin: 20px 0;">
                        <span id="lmqStock">0</span>t
                    </div>
                    <div style="text-align: center; color: #666;">Unlimited Capacity</div>
                    <button class="btn btn-warning btn-small" onclick="updateStock('LMQ')" style="width: 100%; margin-top: 10px;">
                        Update Stock
                    </button>
                </div>
                <div class="card">
                    <h3>MQ (Medium Quality)</h3>
                    <div style="font-size: 2em; text-align: center; margin: 20px 0;">
                        <span id="mqStock">0</span>t
                    </div>
                    <div style="text-align: center; color: #666;">Unlimited Capacity</div>
                    <button class="btn btn-warning btn-small" onclick="updateStock('MQ')" style="width: 100%; margin-top: 10px;">
                        Update Stock
                    </button>
                </div>
            </div>
        </div>

        <!-- Bins Management Tab -->
        <div id="bins" class="tab-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h2>🏭 Bin Management</h2>
                <button class="btn btn-primary" onclick="showModal('binModal')">
                    ⚙️ Update Bin
                </button>
            </div>

            <div class="card">
                <h3>Precleaning Bins</h3>
                <div class="bin-grid" id="precleaningBins">
                    <!-- Bins will be populated here -->
                </div>
            </div>

            <div class="card">
                <h3>Condense Cleaning Bins (24 Hour Process)</h3>
                <div class="bin-grid" id="condenseBins">
                    <!-- Bins will be populated here -->
                </div>
            </div>

            <div class="card">
                <h3>Milly Cleaning Bins (12 Hour Process)</h3>
                <div class="bin-grid" id="millyBins">
                    <!-- Bins will be populated here -->
                </div>
            </div>
        </div>

        <!-- Process Flow Tab -->
        <div id="process" class="tab-content">
            <h2>🔄 Complete Process Flow</h2>

            <div class="card">
                <h3>📋 Process Overview</h3>
                <div style="line-height: 2;">
                    <p><strong>1. Godown Storage:</strong> Unlimited capacity storage by quality categories (HD, LMQ, MQ)</p>
                    <p><strong>2. Order Creation:</strong> Mix wheat according to customer requirements</p>
                    <p><strong>3. Precleaning:</strong> 5 bins with user-defined capacities for initial cleaning</p>
                    <p><strong>4. Condense Cleaning:</strong> 4 bins with user-defined capacities, 24-hour processing time</p>
                    <p><strong>5. Milly Cleaning:</strong> 4 bins with user-defined capacities, 12-hour processing time</p>
                    <p><strong>6. Machine Processing:</strong> Final cutting, cleaning, and polishing</p>
                    <p><strong>7. Ready for Delivery:</strong> Quality-checked and packaged product</p>
                </div>
            </div>

            <div class="card">
                <h3>🎯 Key Business Rules</h3>
                <ul style="line-height: 2; padding-left: 20px;">
                    <li>Godown storage has NO capacity limit—wheat is stored by type/quality</li>
                    <li>Precleaning and cleaning bins have user-defined capacity limits</li>
                    <li>Batch mixing is flexible and based on order requirements</li>
                    <li>Precise timing is enforced for cleaning stages (24 hrs for condense, 12 hrs for milly)</li>
                    <li>Each batch can be tracked through all stages for quality control</li>
                    <li>Users must manually input all inventory and bin data</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- New Order Modal -->
    <div id="newOrderModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('newOrderModal')">&times;</span>
            <h2>📝 Create New Order</h2>
            <form id="newOrderForm">
                <div class="form-group">
                    <label for="customerName">Customer Name:</label>
                    <input type="text" id="customerName" required>
                </div>
                <div class="form-group">
                    <label for="orderQuantity">Total Quantity (tons):</label>
                    <input type="number" id="orderQuantity" required min="1" step="0.1">
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="hdPercentage">HD Percentage (%):</label>
                        <input type="number" id="hdPercentage" min="0" max="100" value="0" step="0.1">
                    </div>
                    <div class="form-group">
                        <label for="lmqPercentage">LMQ Percentage (%):</label>
                        <input type="number" id="lmqPercentage" min="0" max="100" value="0" step="0.1">
                    </div>
                    <div class="form-group">
                        <label for="mqPercentage">MQ Percentage (%):</label>
                        <input type="number" id="mqPercentage" min="0" max="100" value="100" step="0.1">
                    </div>
                </div>
                <div class="form-group">
                    <label for="priority">Priority:</label>
                    <select id="priority">
                        <option value="Normal">Normal</option>
                        <option value="High">High</option>
                        <option value="Urgent">Urgent</option>
                    </select>
                </div>
                <div id="percentageError" style="color: #d32f2f; margin-bottom: 15px; display: none;">
                    Percentages must add up to 100%
                </div>
                <button type="submit" class="btn btn-primary">Create Order</button>
            </form>
        </div>
    </div>

    <!-- Inventory Management Modal -->
    <div id="inventoryModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('inventoryModal')">&times;</span>
            <h2>📦 Update Inventory</h2>
            <form id="inventoryForm">
                <div class="form-group">
                    <label for="stockType">Wheat Type:</label>
                    <select id="stockType" required>
                        <option value="">Select Type</option>
                        <option value="HD">HD (High Density)</option>
                        <option value="LMQ">LMQ (Low Milk Quality)</option>
                        <option value="MQ">MQ (Medium Quality)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="stockAction">Action:</label>
                    <select id="stockAction" required>
                        <option value="">Select Action</option>
                        <option value="add">Add Stock</option>
                        <option value="remove">Remove Stock</option>
                        <option value="set">Set Stock</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="stockAmount">Amount (tons):</label>
                    <input type="number" id="stockAmount" required min="0" step="0.1">
                </div>
                <div class="form-group">
                    <label for="stockReason">Reason:</label>
                    <input type="text" id="stockReason" placeholder="e.g., New delivery, Order fulfillment, etc.">
                </div>
                <button type="submit" class="btn btn-primary">Update Inventory</button>
            </form>
        </div>
    </div>

    <!-- Bin Management Modal -->
    <div id="binModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('binModal')">&times;</span>
            <h2>🏭 Update Bin Status</h2>
            <form id="binForm">
                <div class="form-group">
                    <label for="binType">Bin Type:</label>
                    <select id="binType" required onchange="updateBinNumbers()">
                        <option value="">Select Type</option>
                        <option value="precleaning">Precleaning Bin</option>
                        <option value="condense">Condense Cleaning Bin</option>
                        <option value="milly">Milly Cleaning Bin</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="binNumber">Bin Number:</label>
                    <select id="binNumber" required>
                        <option value="">Select Bin</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="binAction">Action:</label>
                    <select id="binAction" required>
                        <option value="">Select Action</option>
                        <option value="add">Add Wheat</option>
                        <option value="remove">Remove Wheat</option>
                        <option value="empty">Empty Bin</option>
                        <option value="capacity">Update Capacity</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="binAmount">Amount (tons):</label>
                    <input type="number" id="binAmount" required min="0" step="0.1">
                </div>
                <div class="form-group">
                    <label for="relatedOrder">Related Order ID (optional):</label>
                    <input type="text" id="relatedOrder" placeholder="e.g., WO123456">
                </div>
                <button type="submit" class="btn btn-primary">Update Bin</button>
            </form>
        </div>
    </div>

    <script>
        // Initialize data structures with minimal sample data
        let orders = JSON.parse(localStorage.getItem('wheatOrders')) || [];
        let inventory = JSON.parse(localStorage.getItem('wheatInventory')) || {
            HD: 0,
            LMQ: 0,
            MQ: 0
        };
        let bins = JSON.parse(localStorage.getItem('wheatBins')) || {
            precleaning: [
                { id: 1, capacity: 25, occupied: 0, orderId: null },
                { id: 2, capacity: 25, occupied: 0, orderId: null },
                { id: 3, capacity: 25, occupied: 0, orderId: null },
                { id: 4, capacity: 65, occupied: 0, orderId: null },
                { id: 5, capacity: 65, occupied: 0, orderId: null }
            ],
            condense: [
                { id: 1, capacity: 65, occupied: 0, orderId: null, startTime: null },
                { id: 2, capacity: 65, occupied: 0, orderId: null, startTime: null },
                { id: 3, capacity: 65, occupied: 0, orderId: null, startTime: null },
                { id: 4, capacity: 65, occupied: 0, orderId: null, startTime: null }
            ],
            milly: [
                { id: 1, capacity: 25, occupied: 0, orderId: null, startTime: null },
                { id: 2, capacity: 25, occupied: 0, orderId: null, startTime: null },
                { id: 3, capacity: 25, occupied: 0, orderId: null, startTime: null },
                { id: 4, capacity: 25, occupied: 0, orderId: null, startTime: null }
            ]
        };

        // Generate 5 sample orders if none exist
        if (orders.length === 0) {
            generateSampleOrders();
        }

        // Set initial inventory if none exists
        if (inventory.HD === 0 && inventory.LMQ === 0 && inventory.MQ === 0) {
            inventory = { HD: 100, LMQ: 80, MQ: 150 };
            saveData();
        }

        function generateSampleOrders() {
            const sampleOrders = [
                {
                    id: 'WO001',
                    customer: 'ABC Mills Ltd',
                    quantity: 50,
                    hdPercentage: 20,
                    lmqPercentage: 30,
                    mqPercentage: 50,
                    status: 'Created',
                    binNo: null,
                    createdAt: new Date(),
                    priority: 'Normal'
                },
                {
                    id: 'WO002',
                    customer: 'XYZ Foods Pvt',
                    quantity: 75,
                    hdPercentage: 0,
                    lmqPercentage: 40,
                    mqPercentage: 60,
                    status: 'Precleaning',
                    binNo: 1,
                    createdAt: new Date(Date.now() - 24*60*60*1000),
                    priority: 'High'
                },
                {
                    id: 'WO003',
                    customer: 'DEF Industries',
                    quantity: 100,
                    hdPercentage: 25,
                    lmqPercentage: 25,
                    mqPercentage: 50,
                    status: 'Condense Cleaning',
                    binNo: 2,
                    createdAt: new Date(Date.now() - 48*60*60*1000),
                    priority: 'Urgent'
                },
                {
                    id: 'WO004',
                    customer: 'LMN Traders',
                    quantity: 30,
                    hdPercentage: 10,
                    lmqPercentage: 20,
                    mqPercentage: 70,
                    status: 'Ready for Delivery',
                    binNo: null,
                    createdAt: new Date(Date.now() - 72*60*60*1000),
                    priority: 'Normal'
                },
                {
                    id: 'WO005',
                    customer: 'UVW Exports',
                    quantity: 60,
                    hdPercentage: 15,
                    lmqPercentage: 35,
                    mqPercentage: 50,
                    status: 'Milly Cleaning',
                    binNo: 3,
                    createdAt: new Date(Date.now() - 96*60*60*1000),
                    priority: 'High'
                }
            ];
            orders = sampleOrders;
            saveData();
        }

        // Tab switching functionality
        function showTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });

            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');

            // Update displays when switching tabs
            if (tabName === 'dashboard') updateDashboard();
            if (tabName === 'orders') updateOrdersTable();
            if (tabName === 'inventory') updateInventoryDisplay();
            if (tabName === 'bins') updateBinsDisplay();
        }

        // Modal functionality
        function showModal(modalId) {
            document.getElementById(modalId).style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Create new order
        document.getElementById('newOrderForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const hdPerc = parseFloat(document.getElementById('hdPercentage').value) || 0;
            const lmqPerc = parseFloat(document.getElementById('lmqPercentage').value) || 0;
            const mqPerc = parseFloat(document.getElementById('mqPercentage').value) || 0;
            const totalPerc = hdPerc + lmqPerc + mqPerc;

            if (Math.abs(totalPerc - 100) > 0.1) {
                document.getElementById('percentageError').style.display = 'block';
                return;
            }

            const quantity = parseFloat(document.getElementById('orderQuantity').value);

            // Check if we have enough inventory
            const requiredHD = (quantity * hdPerc) / 100;
            const requiredLMQ = (quantity * lmqPerc) / 100;
            const requiredMQ = (quantity * mqPerc) / 100;

            if (requiredHD > inventory.HD || requiredLMQ > inventory.LMQ || requiredMQ > inventory.MQ) {
                alert('Insufficient inventory for this order. Please check stock levels.');
                return;
            }

            const order = {
                id: 'WO' + String(Date.now()).slice(-6),
                customer: document.getElementById('customerName').value,
                quantity: quantity,
                hdPercentage: hdPerc,
                lmqPercentage: lmqPerc,
                mqPercentage: mqPerc,
                status: 'Created',
                binNo: null,
                createdAt: new Date(),
                priority: document.getElementById('priority').value
            };

            // Deduct from inventory
            inventory.HD -= requiredHD;
            inventory.LMQ -= requiredLMQ;
            inventory.MQ -= requiredMQ;

            orders.push(order);
            saveData();
            closeModal('newOrderModal');
            document.getElementById('newOrderForm').reset();
            document.getElementById('percentageError').style.display = 'none';
            document.getElementById('mqPercentage').value = 100;
            updateAllDisplays();
            alert(`Order ${order.id} created successfully!`);
        });

        // Inventory management
        document.getElementById('inventoryForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const type = document.getElementById('stockType').value;
            const action = document.getElementById('stockAction').value;
            const amount = parseFloat(document.getElementById('stockAmount').value);
            const reason = document.getElementById('stockReason').value;

            if (action === 'add') {
                inventory[type] += amount;
            } else if (action === 'remove') {
                if (inventory[type] < amount) {
                    alert('Insufficient stock to remove!');
                    return;
                }
                inventory[type] -= amount;
            } else if (action === 'set') {
                inventory[type] = amount;
            }

            saveData();
            closeModal('inventoryModal');
            document.getElementById('inventoryForm').reset();
            updateAllDisplays();
            alert(`Inventory updated: ${type} ${action} ${amount}t. Reason: ${reason || 'Not specified'}`);
        });

        // Bin management
        document.getElementById('binForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const binType = document.getElementById('binType').value;
            const binNumber = parseInt(document.getElementById('binNumber').value);
            const action = document.getElementById('binAction').value;
            const amount = parseFloat(document.getElementById('binAmount').value);
            const orderId = document.getElementById('relatedOrder').value;

            const bin = bins[binType].find(b => b.id === binNumber);
            if (!bin) {
                alert('Bin not found!');
                return;
            }

            if (action === 'add') {
                if (bin.occupied + amount > bin.capacity) {
                    alert('Cannot add more than bin capacity!');
                    return;
                }
                bin.occupied += amount;
                if (orderId) bin.orderId = orderId;
                if (binType === 'condense' || binType === 'milly') {
                    bin.startTime = new Date();
                }
            } else if (action === 'remove') {
                if (bin.occupied < amount) {
                    alert('Cannot remove more than current amount!');
                    return;
                }
                bin.occupied -= amount;
                if (bin.occupied === 0) {
                    bin.orderId = null;
                    bin.startTime = null;
                }
            } else if (action === 'empty') {
                bin.occupied = 0;
                bin.orderId = null;
                bin.startTime = null;
            } else if (action === 'capacity') {
                if (amount < bin.occupied) {
                    alert('New capacity cannot be less than current occupied amount!');
                    return;
                }
                bin.capacity = amount;
            }

            saveData();
            closeModal('binModal');
            document.getElementById('binForm').reset();
            updateAllDisplays();
            alert(`Bin ${binType} ${binNumber} updated successfully!`);
        });

        // Update bin numbers dropdown based on type
        function updateBinNumbers() {
            const binType = document.getElementById('binType').value;
            const binNumberSelect = document.getElementById('binNumber');

            binNumberSelect.innerHTML = '<option value="">Select Bin</option>';

            if (binType && bins[binType]) {
                bins[binType].forEach(bin => {
                    const option = document.createElement('option');
                    option.value = bin.id;
                    option.textContent = `Bin ${bin.id} (${bin.occupied}/${bin.capacity}t)`;
                    binNumberSelect.appendChild(option);
                });
            }
        }

        // Quick stock update
        function updateStock(type) {
            const amount = prompt(`Enter amount to add to ${type} stock (use negative for removal):`);
            if (amount !== null && !isNaN(amount)) {
                const numAmount = parseFloat(amount);
                if (inventory[type] + numAmount < 0) {
                    alert('Cannot reduce stock below zero!');
                    return;
                }
                inventory[type] += numAmount;
                saveData();
                updateInventoryDisplay();
                alert(`${type} stock updated by ${amount}t`);
            }
        }

        // Update dashboard
        function updateDashboard() {
            const totalOrders = orders.length;
            const activeOrders = orders.filter(o => !['Completed', 'Ready for Delivery'].includes(o.status)).length;
            const completedOrders = orders.filter(o => o.status === 'Completed').length;
            const totalTonnage = orders.reduce((sum, o) => sum + o.quantity, 0);

            document.getElementById('totalOrders').textContent = totalOrders;
            document.getElementById('activeOrders').textContent = activeOrders;
            document.getElementById('completedOrders').textContent = completedOrders;
            document.getElementById('totalTonnage').textContent = totalTonnage + 't';

            // Update bin utilization
            const precleaningUsed = bins.precleaning.filter(b => b.occupied > 0).length;
            const condenseUsed = bins.condense.filter(b => b.occupied > 0).length;
            const millyUsed = bins.milly.filter(b => b.occupied > 0).length;

            document.getElementById('precleaningUtil').textContent = `${precleaningUsed}/5`;
            document.getElementById('condenseUtil').textContent = `${condenseUsed}/4`;
            document.getElementById('millyUtil').textContent = `${millyUsed}/4`;

            document.getElementById('precleaningProgress').style.width = `${(precleaningUsed / 5) * 100}%`;
            document.getElementById('condenseProgress').style.width = `${(condenseUsed / 4) * 100}%`;
            document.getElementById('millyProgress').style.width = `${(millyUsed / 4) * 100}%`;

            // Update current processing
            const processingOrders = orders.filter(o => ['Precleaning', 'Condense Cleaning', 'Milly Cleaning', 'Processing'].includes(o.status));
            const currentProcessingDiv = document.getElementById('currentProcessing');

            if (processingOrders.length === 0) {
                currentProcessingDiv.innerHTML = '<p style="color: #666; text-align: center; margin-top: 20px;">No orders currently processing</p>';
            } else {
                currentProcessingDiv.innerHTML = processingOrders.map(order => `
                    <div style="margin-bottom: 10px; padding: 10px; background: rgba(102, 126, 234, 0.1); border-radius: 8px;">
                        <strong>${order.id}</strong> - ${order.customer}<br>
                        <span class="status-badge status-${order.status.toLowerCase().replace(' ', '').replace(' ', '')}">${order.status}</span>
                        <div style="font-size: 0.9em; color: #666; margin-top: 5px;">Bin: ${order.binNo || 'N/A'} | ${order.quantity}t</div>
                    </div>
                `).join('');
            }
        }

        // Update orders table
        function updateOrdersTable() {
            const tbody = document.getElementById('ordersTable');
            tbody.innerHTML = orders.map(order => {
                const progress = getOrderProgress(order.status);
                const mixInfo = `HD:${order.hdPercentage}% LMQ:${order.lmqPercentage}% MQ:${order.mqPercentage}%`;
                return `
                    <tr>
                        <td><strong>${order.id}</strong></td>
                        <td>${order.customer}</td>
                        <td>${order.quantity}t</td>
                        <td style="font-size: 0.8em;">${mixInfo}</td>
                        <td><span class="status-badge status-${order.status.toLowerCase().replace(' ', '').replace(' ', '')}">${order.status}</span></td>
                        <td>${order.binNo || '-'}</td>
                        <td>
                            <div class="progress-bar" style="width: 80px;">
                                <div class="progress-fill" style="width: ${progress}%"></div>
                            </div>
                            <small>${progress}%</small>
                        </td>
                        <td>
                            <button class="btn btn-secondary btn-small" onclick="advanceOrder('${order.id}')">
                                Next Stage
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        // Update inventory display
        function updateInventoryDisplay() {
            document.getElementById('hdStock').textContent = inventory.HD.toFixed(1);
            document.getElementById('lmqStock').textContent = inventory.LMQ.toFixed(1);
            document.getElementById('mqStock').textContent = inventory.MQ.toFixed(1);
        }

        // Update bins display
        function updateBinsDisplay() {
            updateBinSection('precleaningBins', bins.precleaning, 'Precleaning');
            updateBinSection('condenseBins', bins.condense, 'Condense');
            updateBinSection('millyBins', bins.milly, 'Milly');
        }

        function updateBinSection(containerId, binArray, type) {
            const container = document.getElementById(containerId);
            container.innerHTML = binArray.map(bin => {
                const isOccupied = bin.occupied > 0;
                const utilizationPerc = ((bin.occupied / bin.capacity) * 100).toFixed(1);
                const timeInfo = bin.startTime ? `<div style="font-size: 0.8em; color: #666;">Started: ${new Date(bin.startTime).toLocaleString()}</div>` : '';

                return `
                    <div class="bin-item ${isOccupied ? 'occupied' : 'available'}">
                        <h4>${type} Bin ${bin.id}</h4>
                        <div style="font-size: 1.2em; margin: 10px 0;">
                            ${bin.occupied.toFixed(1)}/${bin.capacity}t
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${utilizationPerc}%"></div>
                        </div>
                        <div style="font-size: 0.9em; margin: 5px 0;">${utilizationPerc}% utilized</div>
                        ${bin.orderId ? `<div style="font-size: 0.9em; color: #333; margin-bottom: 5px;">Order: ${bin.orderId}</div>` : ''}
                        ${timeInfo}
                        <div style="margin-top: 10px;">
                            <button class="btn btn-warning btn-small" onclick="editBin('${type.toLowerCase()}', ${bin.id})" style="font-size: 0.8em; padding: 5px 10px;">
                                Edit
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Edit bin function
        function editBin(binType, binId) {
            document.getElementById('binType').value = binType;
            updateBinNumbers();
            document.getElementById('binNumber').value = binId;
            showModal('binModal');
        }

        // Get order progress percentage
        function getOrderProgress(status) {
            const stages = {
                'Created': 10,
                'Precleaning': 25,
                'Condense Cleaning': 50,
                'Milly Cleaning': 75,
                'Processing': 90,
                'Ready for Delivery': 100,
                'Completed': 100
            };
            return stages[status] || 0;
        }

        // Advance order to next stage
        function advanceOrder(orderId) {
            const order = orders.find(o => o.id === orderId);
            if (!order) return;

            const stageFlow = ['Created', 'Precleaning', 'Condense Cleaning', 'Milly Cleaning', 'Processing', 'Ready for Delivery', 'Completed'];
            const currentIndex = stageFlow.indexOf(order.status);

            if (currentIndex < stageFlow.length - 1) {
                // Release current bin if occupied
                if (order.binNo) {
                    releaseBin(order.status, order.binNo, orderId);
                }

                // Move to next stage
                order.status = stageFlow[currentIndex + 1];
                order.binNo = null;

                // For stages that require bins, ask user to manually assign
                if (['Precleaning', 'Condense Cleaning', 'Milly Cleaning'].includes(order.status)) {
                    alert(`Order ${orderId} moved to ${order.status}. Please manually assign a bin using the Bin Management section.`);
                }

                saveData();
                updateAllDisplays();
                alert(`Order ${orderId} advanced to ${order.status}`);
            }
        }

        // Release bin
        function releaseBin(stage, binNo, orderId) {
            let binType;
            if (stage === 'Precleaning') binType = 'precleaning';
            else if (stage === 'Condense Cleaning') binType = 'condense';
            else if (stage === 'Milly Cleaning') binType = 'milly';
            else return;

            const bin = bins[binType].find(b => b.id === binNo && b.orderId === orderId);
            if (bin) {
                bin.occupied = 0;
                bin.orderId = null;
                bin.startTime = null;
            }
        }

        // Update all displays
        function updateAllDisplays() {
            updateDashboard();
            updateOrdersTable();
            updateInventoryDisplay();
            updateBinsDisplay();
        }

        // Save data to localStorage
        function saveData() {
            localStorage.setItem('wheatOrders', JSON.stringify(orders));
            localStorage.setItem('wheatInventory', JSON.stringify(inventory));
            localStorage.setItem('wheatBins', JSON.stringify(bins));
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }

        // Auto-update percentage fields in new order form
        document.getElementById('hdPercentage').addEventListener('input', updatePercentages);
        document.getElementById('lmqPercentage').addEventListener('input', updatePercentages);
        document.getElementById('mqPercentage').addEventListener('input', updatePercentages);

        function updatePercentages() {
            const hd = parseFloat(document.getElementById('hdPercentage').value) || 0;
            const lmq = parseFloat(document.getElementById('lmqPercentage').value) || 0;
            const mq = parseFloat(document.getElementById('mqPercentage').value) || 0;

            const total = hd + lmq + mq;

            // Visual feedback for percentage validation
            const inputs = [document.getElementById('hdPercentage'), document.getElementById('lmqPercentage'), document.getElementById('mqPercentage')];
            const errorDiv = document.getElementById('percentageError');

            if (Math.abs(total - 100) > 0.1) {
                inputs.forEach(input => input.style.borderColor = '#d32f2f');
                errorDiv.style.display = 'block';
            } else {
                inputs.forEach(input => input.style.borderColor = '#e0e0e0');
                errorDiv.style.display = 'none';
            }
        }

        // Initialize the application
        function init() {
            updateAllDisplays();
        }

        // Start the application
        init();
    </script>
</body>
</html>