<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Wheat Management System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

            .header h1 {
                color: #2c3e50;
                font-size: 2.5em;
                margin-bottom: 10px;
            }

            .header p {
                color: #7f8c8d;
                font-size: 1.1em;
            }

        .nav-tabs {
            display: flex;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            padding: 5px;
            margin-bottom: 30px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            flex-wrap: wrap;
        }

        .nav-tab {
            flex: 1;
            min-width: 120px;
            padding: 15px 10px;
            text-align: center;
            background: transparent;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9em;
            font-weight: 500;
        }

            .nav-tab.active {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            }

            .nav-tab:hover:not(.active) {
                background: rgba(102, 126, 234, 0.1);
            }

        .tab-content {
            display: none;
        }

            .tab-content.active {
                display: block;
            }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            transition: transform 0.3s ease;
        }

            .card:hover {
                transform: translateY(-5px);
            }

            .card h3 {
                color: #2c3e50;
                margin-bottom: 15px;
                font-size: 1.3em;
            }

        .status-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 500;
            text-transform: uppercase;
        }

        .status-created {
            background: #e8f4fd;
            color: #1e88e5;
        }

        .status-transfer {
            background: #fff3e0;
            color: #ff9800;
        }

        .status-precleaning {
            background: #fff3e0;
            color: #ff9800;
        }

        .status-condense {
            background: #f3e5f5;
            color: #9c27b0;
        }

        .status-milly {
            background: #e8f5e8;
            color: #4caf50;
        }

        .status-processing {
            background: #fff8e1;
            color: #ffc107;
        }

        .status-ready {
            background: #e8f5e8;
            color: #2e7d32;
        }

        .status-completed {
            background: #f5f5f5;
            color: #616161;
        }

        .form-group {
            margin-bottom: 20px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: 500;
                color: #2c3e50;
            }

            .form-group input, .form-group select, .form-group textarea {
                width: 100%;
                padding: 12px;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                font-size: 1em;
                transition: border-color 0.3s ease;
            }

                .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
                    outline: none;
                    border-color: #667eea;
                }

        .form-row {
            display: flex;
            gap: 15px;
        }

            .form-row .form-group {
                flex: 1;
            }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 500;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
            }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-warning {
            background: #ffc107;
            color: #212529;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-small {
            padding: 8px 15px;
            font-size: 0.9em;
        }

        .table-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

            .table th, .table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #e0e0e0;
            }

            .table th {
                background: #f8f9fa;
                font-weight: 600;
                color: #2c3e50;
            }

            .table tr:hover {
                background: rgba(102, 126, 234, 0.05);
            }

        .bin-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .bin-item {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

            .bin-item.occupied {
                background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%);
            }

            .bin-item.available {
                background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e0e0e0;
            border-radius: 4px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            transition: width 0.3s ease;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .close {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 28px;
            cursor: pointer;
            color: #999;
        }

            .close:hover {
                color: #333;
            }

        .waste-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .waste-card {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            border-left: 4px solid;
        }

        .waste-drum {
            border-left-color: #ff6b6b;
        }

        .waste-magnet {
            border-left-color: #4ecdc4;
        }

        .waste-separator {
            border-left-color: #45b7d1;
        }

        .cleaning-log {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            border-left: 4px solid #28a745;
        }

        .file-upload-area {
            border: 2px dashed #ddd;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }

            .file-upload-area:hover {
                border-color: #667eea;
            }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 8px;
            border-left: 4px solid;
        }

        .alert-info {
            background: #e8f4fd;
            border-color: #1e88e5;
            color: #1565c0;
        }

        .alert-warning {
            background: #fff8e1;
            border-color: #ffc107;
            color: #f57c00;
        }

        .alert-success {
            background: #e8f5e8;
            border-color: #4caf50;
            color: #2e7d32;
        }

        @@media (max-width: 768px) {
            .nav-tabs

        {
            flex-direction: column;
        }

        .dashboard-grid {
            grid-template-columns: 1fr;
        }

        .form-row {
            flex-direction: column;
        }

        .waste-summary {
            grid-template-columns: 1fr;
        }

        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🌾 Enhanced Wheat Management System</h1>
            <p>Complete Storage, Cleaning & Waste Management</p>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('dashboard')">Dashboard</button>
            <button class="nav-tab" onclick="showTab('orders')">Orders</button>
            <button class="nav-tab" onclick="showTab('inventory')">Inventory</button>
            <button class="nav-tab" onclick="showTab('waste')">Waste Management</button>
            <button class="nav-tab" onclick="showTab('cleaning')">Cleaning Logs</button>
            <button class="nav-tab" onclick="showTab('bins')">Bins</button>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content active">
            <div class="dashboard-grid">
                <div class="card">
                    <h3>📊 Today's Overview</h3>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                        <span>Total Orders:</span>
                        <strong id="totalOrders">0</strong>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                        <span>Active Orders:</span>
                        <strong id="activeOrders">0</strong>
                    </div>
                    <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                        <span>Today's Waste:</span>
                        <strong id="todayWaste">0kg</strong>
                    </div>
                    <div style="display: flex; justify-content: space-between;">
                        <span>Last Cleaning:</span>
                        <strong id="lastCleaning">-</strong>
                    </div>
                </div>

                <div class="card">
                    <h3>⏰ Current Processing</h3>
                    <div id="currentProcessing">
                        <p style="color: #666; text-align: center; margin-top: 20px;">No orders currently processing</p>
                    </div>
                </div>

                <div class="card">
                    <h3>🗑️ Today's Waste Summary</h3>
                    <div style="margin-bottom: 15px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <span>🥁 Drum Shield:</span>
                            <span id="todayDrumWaste">0kg</span>
                        </div>
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <span>🧲 Magnets:</span>
                            <span id="todayMagnetWaste">0kg</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span>⚪ Separator:</span>
                            <span id="todaySeparatorWaste">0kg</span>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <h3>🚀 Quick Actions</h3>
                    <button class="btn btn-primary" onclick="showModal('newOrderModal')" style="width: 100%; margin-bottom: 10px;">
                        ➕ New Order
                    </button>
                    <button class="btn btn-warning" onclick="showModal('wasteModal')" style="width: 100%; margin-bottom: 10px;">
                        🗑️ Log Waste
                    </button>
                    <button class="btn btn-success" onclick="showModal('cleaningModal')" style="width: 100%;">
                        🧹 Log Cleaning
                    </button>
                </div>
            </div>
        </div>

        <!-- Orders Tab -->
        <div id="orders" class="tab-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h2>📋 Order Management</h2>
                <button class="btn btn-primary" onclick="showModal('newOrderModal')">
                    ➕ New Order
                </button>
            </div>

            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Quantity</th>
                            <th>Mix (%)</th>
                            <th>Current Stage</th>
                            <th>Bin No.</th>
                            <th>Progress</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="ordersTable">
                        <!-- Orders will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Inventory Tab -->
        <div id="inventory" class="tab-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h2>📦 Godown Inventory Management</h2>
                <button class="btn btn-primary" onclick="showModal('inventoryModal')">
                    ➕ Update Stock
                </button>
            </div>

            <div class="dashboard-grid">
                <div class="card">
                    <h3>HD (High Density)</h3>
                    <div style="font-size: 2em; text-align: center; margin: 20px 0;">
                        <span id="hdStock">0</span>t
                    </div>
                    <div style="text-align: center; color: #666;">Unlimited Capacity</div>
                    <button class="btn btn-warning btn-small" onclick="updateStock('HD')" style="width: 100%; margin-top: 10px;">
                        Update Stock
                    </button>
                </div>
                <div class="card">
                    <h3>LMQ (Low Milk Quality)</h3>
                    <div style="font-size: 2em; text-align: center; margin: 20px 0;">
                        <span id="lmqStock">0</span>t
                    </div>
                    <div style="text-align: center; color: #666;">Unlimited Capacity</div>
                    <button class="btn btn-warning btn-small" onclick="updateStock('LMQ')" style="width: 100%; margin-top: 10px;">
                        Update Stock
                    </button>
                </div>
                <div class="card">
                    <h3>MQ (Medium Quality)</h3>
                    <div style="font-size: 2em; text-align: center; margin: 20px 0;">
                        <span id="mqStock">0</span>t
                    </div>
                    <div style="text-align: center; color: #666;">Unlimited Capacity</div>
                    <button class="btn btn-warning btn-small" onclick="updateStock('MQ')" style="width: 100%; margin-top: 10px;">
                        Update Stock
                    </button>
                </div>
            </div>
        </div>

        <!-- Waste Management Tab -->
        <div id="waste" class="tab-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h2>🗑️ Waste Management</h2>
                <button class="btn btn-primary" onclick="showModal('wasteModal')">
                    ➕ Log Waste Entry
                </button>
            </div>

            <div class="waste-summary">
                <div class="waste-card waste-drum">
                    <h4>🥁 Drum Shield</h4>
                    <div style="font-size: 1.5em; margin: 10px 0;">
                        <span id="totalDrumWaste">0</span>kg
                    </div>
                    <small>Plastic, Cotton, Thread</small>
                </div>
                <div class="waste-card waste-magnet">
                    <h4>🧲 Magnets Machine</h4>
                    <div style="font-size: 1.5em; margin: 10px 0;">
                        <span id="totalMagnetWaste">0</span>kg
                    </div>
                    <small>Metal, Particles</small>
                </div>
                <div class="waste-card waste-separator">
                    <h4>⚪ Separator</h4>
                    <div style="font-size: 1.5em; margin: 10px 0;">
                        <span id="totalSeparatorWaste">0</span>kg
                    </div>
                    <small>Stones, Heavy Particles</small>
                </div>
            </div>

            <div class="table-container">
                <h3>Recent Waste Entries</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Machine</th>
                            <th>Waste Type</th>
                            <th>Weight (kg)</th>
                            <th>Order ID</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody id="wasteTable">
                        <!-- Waste entries will be populated here -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Cleaning Logs Tab -->
        <div id="cleaning" class="tab-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h2>🧹 Cleaning & Maintenance Logs</h2>
                <button class="btn btn-primary" onclick="showModal('cleaningModal')">
                    ➕ Log Cleaning Activity
                </button>
            </div>

            <div class="alert alert-info">
                <strong>Cleaning Schedule:</strong> Configured for every 3 hours. Upload evidence photos for each cleaning activity.
            </div>

            <div id="cleaningLogs">
                <!-- Cleaning logs will be populated here -->
            </div>
        </div>

        <!-- Bins Management Tab -->
        <div id="bins" class="tab-content">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                <h2>🏭 Bin Management</h2>
                <button class="btn btn-primary" onclick="showModal('binModal')">
                    ⚙️ Update Bin
                </button>
            </div>

            <div class="card">
                <h3>Condense Cleaning Bins (24 Hour Process)</h3>
                <div class="bin-grid" id="condenseBins">
                    <!-- Bins will be populated here -->
                </div>
            </div>

            <div class="card">
                <h3>Milly Cleaning Bins (12 Hour Process)</h3>
                <div class="bin-grid" id="millyBins">
                    <!-- Bins will be populated here -->
                </div>
            </div>
        </div>
    </div>

    <!-- New Order Modal -->
    <div id="newOrderModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('newOrderModal')">&times;</span>
            <h2>📝 Create New Order</h2>
            <form id="newOrderForm">
                <div class="form-group">
                    <label for="customerName">Customer Name:</label>
                    <input type="text" id="customerName" required>
                </div>
                <div class="form-group">
                    <label for="orderQuantity">Total Quantity (tons):</label>
                    <input type="number" id="orderQuantity" required min="1" step="0.1">
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="hdPercentage">HD Percentage (%):</label>
                        <input type="number" id="hdPercentage" min="0" max="100" value="0" step="0.1">
                    </div>
                    <div class="form-group">
                        <label for="lmqPercentage">LMQ Percentage (%):</label>
                        <input type="number" id="lmqPercentage" min="0" max="100" value="0" step="0.1">
                    </div>
                    <div class="form-group">
                        <label for="mqPercentage">MQ Percentage (%):</label>
                        <input type="number" id="mqPercentage" min="0" max="100" value="100" step="0.1">
                    </div>
                </div>
                <div class="form-group">
                    <label for="priority">Priority:</label>
                    <select id="priority">
                        <option value="Normal">Normal</option>
                        <option value="High">High</option>
                        <option value="Urgent">Urgent</option>
                    </select>
                </div>
                <div id="percentageError" style="color: #d32f2f; margin-bottom: 15px; display: none;">
                    Percentages must add up to 100%
                </div>
                <button type="submit" class="btn btn-primary">Create Order</button>
            </form>
        </div>
    </div>

    <!-- Waste Management Modal -->
    <div id="wasteModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('wasteModal')">&times;</span>
            <h2>🗑️ Log Waste Entry</h2>
            <form id="wasteForm">
                <div class="form-group">
                    <label for="wasteMachine">Machine:</label>
                    <select id="wasteMachine" required>
                        <option value="">Select Machine</option>
                        <option value="drum">🥁 Drum Shield</option>
                        <option value="magnet">🧲 Magnets Machine</option>
                        <option value="separator">⚪ Separator</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="wasteType">Waste Type:</label>
                    <input type="text" id="wasteType" placeholder="e.g., Plastic, Metal, Stones" required>
                </div>
                <div class="form-group">
                    <label for="wasteWeight">Weight (kg):</label>
                    <input type="number" id="wasteWeight" required min="0" step="0.1">
                </div>
                <div class="form-group">
                    <label for="relatedOrderWaste">Related Order ID (optional):</label>
                    <input type="text" id="relatedOrderWaste" placeholder="e.g., WO123456">
                </div>
                <div class="form-group">
                    <label for="wasteNotes">Notes:</label>
                    <textarea id="wasteNotes" rows="3" placeholder="Additional notes about the waste collected..."></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Log Waste Entry</button>
            </form>
        </div>
    </div>

    <!-- Cleaning Modal -->
    <div id="cleaningModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('cleaningModal')">&times;</span>
            <h2>🧹 Log Cleaning Activity</h2>
            <form id="cleaningForm">
                <div class="form-group">
                    <label for="cleaningMachine">Machine/Area:</label>
                    <select id="cleaningMachine" required>
                        <option value="">Select Machine/Area</option>
                        <option value="drum">🥁 Drum Shield</option>
                        <option value="magnet">🧲 Magnets Machine</option>
                        <option value="separator">⚪ Separator</option>
                        <option value="condense">🏭 Condense Bins Area</option>
                        <option value="milly">🏭 Milly Bins Area</option>
                        <option value="general">🏗️ General Area</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="cleaningType">Cleaning Type:</label>
                    <select id="cleaningType" required>
                        <option value="">Select Type</option>
                        <option value="routine">Routine Cleaning</option>
                        <option value="deep">Deep Cleaning</option>
                        <option value="maintenance">Maintenance</option>
                        <option value="inspection">Inspection</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="cleaningDuration">Duration (minutes):</label>
                    <input type="number" id="cleaningDuration" required min="1">
                </div>
                <div class="form-group">
                    <label for="cleaningEvidence">Upload Evidence Photo:</label>
                    <div class="file-upload-area" onclick="document.getElementById('evidencePhoto').click()">
                        <p>📸 Click to upload photo evidence</p>
                        <small>Accepted formats: JPG, PNG, WebP</small>
                    </div>
                    <input type="file" id="evidencePhoto" accept="image/*" style="display: none;">
                </div>
                <div class="form-group">
                    <label for="cleaningNotes">Cleaning Notes:</label>
                    <textarea id="cleaningNotes" rows="3" placeholder="Describe the cleaning activity, any issues found, etc."></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Log Cleaning Activity</button>
            </form>
        </div>
    </div>

    <!-- Inventory Management Modal -->
    <div id="inventoryModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('inventoryModal')">&times;</span>
            <h2>📦 Update Inventory</h2>
            <form id="inventoryForm">
                <div class="form-group">
                    <label for="stockType">Wheat Type:</label>
                    <select id="stockType" required>
                        <option value="">Select Type</option>
                        <option value="HD">HD (High Density)</option>
                        <option value="LMQ">LMQ (Low Milk Quality)</option>
                        <option value="MQ">MQ (Medium Quality)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="stockAction">Action:</label>
                    <select id="stockAction" required>
                        <option value="">Select Action</option>
                        <option value="add">Add Stock</option>
                        <option value="remove">Remove Stock</option>
                        <option value="set">Set Stock</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="stockAmount">Amount (tons):</label>
                    <input type="number" id="stockAmount" required min="0" step="0.1">
                </div>
                <div class="form-group">
                    <label for="stockReason">Reason:</label>
                    <input type="text" id="stockReason" placeholder="e.g., New delivery, Order fulfillment, etc.">
                </div>
                <button type="submit" class="btn btn-primary">Update Inventory</button>
            </form>
        </div>
    </div>

    <!-- Bin Management Modal -->
    <div id="binModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('binModal')">&times;</span>
            <h2>🏭 Update Bin Status</h2>
            <form id="binForm">
                <div class="form-group">
                    <label for="binType">Bin Type:</label>
                    <select id="binType" required onchange="updateBinNumbers()">
                        <option value="">Select Type</option>
                        <option value="condense">Condense Cleaning Bin</option>
                        <option value="milly">Milly Cleaning Bin</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="binNumber">Bin Number:</label>
                    <select id="binNumber" required>
                        <option value="">Select Bin</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="binAction">Action:</label>
                    <select id="binAction" required>
                        <option value="">Select Action</option>
                        <option value="add">Add Wheat</option>
                        <option value="remove">Remove Wheat</option>
                        <option value="empty">Empty Bin</option>
                        <option value="capacity">Update Capacity</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="binAmount">Amount (tons):</label>
                    <input type="number" id="binAmount" required min="0" step="0.1">
                </div>
                <div class="form-group">
                    <label for="relatedOrder">Related Order ID (optional):</label>
                    <input type="text" id="relatedOrder" placeholder="e.g., WO123456">
                </div>
                <button type="submit" class="btn btn-primary">Update Bin</button>
            </form>
        </div>
    </div>

    <script>
        // Initialize data structures
        let orders = JSON.parse(localStorage.getItem('wheatOrders')) || [];
        let inventory = JSON.parse(localStorage.getItem('wheatInventory')) || { HD: 100, LMQ: 80, MQ: 150 };
        let wasteEntries = JSON.parse(localStorage.getItem('wasteEntries')) || [];
        let cleaningLogs = JSON.parse(localStorage.getItem('cleaningLogs')) || [];
        let bins = JSON.parse(localStorage.getItem('wheatBins')) || {
            condense: [
                { id: 1, capacity: 65, occupied: 0, orderId: null, startTime: null },
                { id: 2, capacity: 65, occupied: 0, orderId: null, startTime: null },
                { id: 3, capacity: 65, occupied: 0, orderId: null, startTime: null },
                { id: 4, capacity: 65, occupied: 0, orderId: null, startTime: null }
            ],
            milly: [
                { id: 1, capacity: 25, occupied: 0, orderId: null, startTime: null },
                { id: 2, capacity: 25, occupied: 0, orderId: null, startTime: null },
                { id: 3, capacity: 25, occupied: 0, orderId: null, startTime: null },
                { id: 4, capacity: 25, occupied: 0, orderId: null, startTime: null }
            ]
        };

        // Generate sample data if none exists
        if (orders.length === 0) {
            generateSampleData();
        }

        function generateSampleData() {
            // Sample orders
            orders = [
                {
                    id: 'WO001',
                    customer: 'ABC Mills Ltd',
                    quantity: 50,
                    hdPercentage: 20,
                    lmqPercentage: 30,
                    mqPercentage: 50,
                    status: 'Created',
                    binNo: null,
                    createdAt: new Date(),
                    priority: 'Normal'
                },
                {
                    id: 'WO002',
                    customer: 'XYZ Foods Pvt',
                    quantity: 75,
                    hdPercentage: 0,
                    lmqPercentage: 40,
                    mqPercentage: 60,
                    status: 'Transfer to Pre-cleaning',
                    binNo: null,
                    createdAt: new Date(Date.now() - 24*60*60*1000),
                    priority: 'High'
                }
            ];

            // Sample waste entries
            wasteEntries = [
                {
                    id: 'W001',
                    date: new Date(),
                    machine: 'drum',
                    wasteType: 'Plastic, Cotton threads',
                    weight: 2.5,
                    orderId: 'WO002',
                    notes: 'Routine collection during transfer process'
                },
                {
                    id: 'W002',
                    date: new Date(Date.now() - 2*60*60*1000),
                    machine: 'magnet',
                    wasteType: 'Metal particles',
                    weight: 0.8,
                    orderId: 'WO002',
                    notes: 'Small metal pieces collected'
                }
            ];

            // Sample cleaning logs
            cleaningLogs = [
                {
                    id: 'C001',
                    date: new Date(Date.now() - 3*60*60*1000),
                    machine: 'drum',
                    type: 'routine',
                    duration: 15,
                    notes: 'Regular 3-hour cleaning completed',
                    evidencePhoto: null
                }
            ];

            saveData();
        }

        // Tab switching functionality
        function showTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });

            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');

            // Update displays when switching tabs
            if (tabName === 'dashboard') updateDashboard();
            if (tabName === 'orders') updateOrdersTable();
            if (tabName === 'inventory') updateInventoryDisplay();
            if (tabName === 'waste') updateWasteDisplay();
            if (tabName === 'cleaning') updateCleaningDisplay();
            if (tabName === 'bins') updateBinsDisplay();
        }

        // Modal functionality
        function showModal(modalId) {
            document.getElementById(modalId).style.display = 'block';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        // Create new order
        document.getElementById('newOrderForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const hdPerc = parseFloat(document.getElementById('hdPercentage').value) || 0;
            const lmqPerc = parseFloat(document.getElementById('lmqPercentage').value) || 0;
            const mqPerc = parseFloat(document.getElementById('mqPercentage').value) || 0;
            const totalPerc = hdPerc + lmqPerc + mqPerc;

            if (Math.abs(totalPerc - 100) > 0.1) {
                document.getElementById('percentageError').style.display = 'block';
                return;
            }

            const quantity = parseFloat(document.getElementById('orderQuantity').value);
            const requiredHD = (quantity * hdPerc) / 100;
            const requiredLMQ = (quantity * lmqPerc) / 100;
            const requiredMQ = (quantity * mqPerc) / 100;

            if (requiredHD > inventory.HD || requiredLMQ > inventory.LMQ || requiredMQ > inventory.MQ) {
                alert('Insufficient inventory for this order. Please check stock levels.');
                return;
            }

            const order = {
                id: 'WO' + String(Date.now()).slice(-6),
                customer: document.getElementById('customerName').value,
                quantity: quantity,
                hdPercentage: hdPerc,
                lmqPercentage: lmqPerc,
                mqPercentage: mqPerc,
                status: 'Created',
                binNo: null,
                createdAt: new Date(),
                priority: document.getElementById('priority').value
            };

            // Deduct from inventory
            inventory.HD -= requiredHD;
            inventory.LMQ -= requiredLMQ;
            inventory.MQ -= requiredMQ;

            orders.push(order);
            saveData();
            closeModal('newOrderModal');
            document.getElementById('newOrderForm').reset();
            document.getElementById('percentageError').style.display = 'none';
            document.getElementById('mqPercentage').value = 100;
            updateAllDisplays();
            alert(`Order ${order.id} created successfully!`);
        });

        // Waste management
        document.getElementById('wasteForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const wasteEntry = {
                id: 'W' + String(Date.now()).slice(-6),
                date: new Date(),
                machine: document.getElementById('wasteMachine').value,
                wasteType: document.getElementById('wasteType').value,
                weight: parseFloat(document.getElementById('wasteWeight').value),
                orderId: document.getElementById('relatedOrderWaste').value || null,
                notes: document.getElementById('wasteNotes').value
            };

            // Convert waste weight to tons and subtract from inventory
            const wasteInTons = wasteEntry.weight / 1000;
            const totalInventory = inventory.HD + inventory.LMQ + inventory.MQ;

            if (totalInventory > 0) {
                // Proportionally reduce from all inventory types
                const hdRatio = inventory.HD / totalInventory;
                const lmqRatio = inventory.LMQ / totalInventory;
                const mqRatio = inventory.MQ / totalInventory;

                inventory.HD = Math.max(0, inventory.HD - (wasteInTons * hdRatio));
                inventory.LMQ = Math.max(0, inventory.LMQ - (wasteInTons * lmqRatio));
                inventory.MQ = Math.max(0, inventory.MQ - (wasteInTons * mqRatio));
            }

            wasteEntries.push(wasteEntry);
            saveData();
            closeModal('wasteModal');
            document.getElementById('wasteForm').reset();
            updateAllDisplays();
            alert(`Waste entry logged: ${wasteEntry.weight}kg from ${getMachineName(wasteEntry.machine)}`);
        });

        // Cleaning logs
        document.getElementById('cleaningForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const cleaningEntry = {
                id: 'C' + String(Date.now()).slice(-6),
                date: new Date(),
                machine: document.getElementById('cleaningMachine').value,
                type: document.getElementById('cleaningType').value,
                duration: parseInt(document.getElementById('cleaningDuration').value),
                notes: document.getElementById('cleaningNotes').value,
                evidencePhoto: document.getElementById('evidencePhoto').files[0] ? 'Photo uploaded' : null
            };

            cleaningLogs.push(cleaningEntry);
            saveData();
            closeModal('cleaningModal');
            document.getElementById('cleaningForm').reset();
            updateAllDisplays();
            alert(`Cleaning activity logged for ${getMachineName(cleaningEntry.machine)}`);
        });

        // Inventory management
        document.getElementById('inventoryForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const type = document.getElementById('stockType').value;
            const action = document.getElementById('stockAction').value;
            const amount = parseFloat(document.getElementById('stockAmount').value);
            const reason = document.getElementById('stockReason').value;

            if (action === 'add') {
                inventory[type] += amount;
            } else if (action === 'remove') {
                if (inventory[type] < amount) {
                    alert('Insufficient stock to remove!');
                    return;
                }
                inventory[type] -= amount;
            } else if (action === 'set') {
                inventory[type] = amount;
            }

            saveData();
            closeModal('inventoryModal');
            document.getElementById('inventoryForm').reset();
            updateAllDisplays();
            alert(`Inventory updated: ${type} ${action} ${amount}t. Reason: ${reason || 'Not specified'}`);
        });

        // Bin management
        document.getElementById('binForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const binType = document.getElementById('binType').value;
            const binNumber = parseInt(document.getElementById('binNumber').value);
            const action = document.getElementById('binAction').value;
            const amount = parseFloat(document.getElementById('binAmount').value);
            const orderId = document.getElementById('relatedOrder').value;

            const bin = bins[binType].find(b => b.id === binNumber);
            if (!bin) {
                alert('Bin not found!');
                return;
            }

            if (action === 'add') {
                if (bin.occupied + amount > bin.capacity) {
                    alert('Cannot add more than bin capacity!');
                    return;
                }
                bin.occupied += amount;
                if (orderId) bin.orderId = orderId;
                bin.startTime = new Date();
            } else if (action === 'remove') {
                if (bin.occupied < amount) {
                    alert('Cannot remove more than current amount!');
                    return;
                }
                bin.occupied -= amount;
                if (bin.occupied === 0) {
                    bin.orderId = null;
                    bin.startTime = null;
                }
            } else if (action === 'empty') {
                bin.occupied = 0;
                bin.orderId = null;
                bin.startTime = null;
            } else if (action === 'capacity') {
                if (amount < bin.occupied) {
                    alert('New capacity cannot be less than current occupied amount!');
                    return;
                }
                bin.capacity = amount;
            }

            saveData();
            closeModal('binModal');
            document.getElementById('binForm').reset();
            updateAllDisplays();
            alert(`Bin ${binType} ${binNumber} updated successfully!`);
        });

        // Helper functions
        function getMachineName(machine) {
            const names = {
                'drum': 'Drum Shield',
                'magnet': 'Magnets Machine',
                'separator': 'Separator',
                'condense': 'Condense Bins Area',
                'milly': 'Milly Bins Area',
                'general': 'General Area'
            };
            return names[machine] || machine;
        }

        function updateBinNumbers() {
            const binType = document.getElementById('binType').value;
            const binNumberSelect = document.getElementById('binNumber');

            binNumberSelect.innerHTML = '<option value="">Select Bin</option>';

            if (binType && bins[binType]) {
                bins[binType].forEach(bin => {
                    const option = document.createElement('option');
                    option.value = bin.id;
                    option.textContent = `Bin ${bin.id} (${bin.occupied}/${bin.capacity}t)`;
                    binNumberSelect.appendChild(option);
                });
            }
        }

        function updateStock(type) {
            const amount = prompt(`Enter amount to add to ${type} stock (use negative for removal):`);
            if (amount !== null && !isNaN(amount)) {
                const numAmount = parseFloat(amount);
                if (inventory[type] + numAmount < 0) {
                    alert('Cannot reduce stock below zero!');
                    return;
                }
                inventory[type] += numAmount;
                saveData();
                updateInventoryDisplay();
                alert(`${type} stock updated by ${amount}t`);
            }
        }

        // Update displays
        function updateDashboard() {
            const totalOrders = orders.length;
            const activeOrders = orders.filter(o => !['Completed', 'Ready for Delivery'].includes(o.status)).length;

            // Today's waste calculation
            const today = new Date().toDateString();
            const todayWaste = wasteEntries.filter(w => new Date(w.date).toDateString() === today);
            const totalTodayWaste = todayWaste.reduce((sum, w) => sum + w.weight, 0);

            const todayDrum = todayWaste.filter(w => w.machine === 'drum').reduce((sum, w) => sum + w.weight, 0);
            const todayMagnet = todayWaste.filter(w => w.machine === 'magnet').reduce((sum, w) => sum + w.weight, 0);
            const todaySeparator = todayWaste.filter(w => w.machine === 'separator').reduce((sum, w) => sum + w.weight, 0);

            // Last cleaning
            const lastCleaning = cleaningLogs.length > 0 ?
                new Date(cleaningLogs[cleaningLogs.length - 1].date).toLocaleTimeString() : '-';

            document.getElementById('totalOrders').textContent = totalOrders;
            document.getElementById('activeOrders').textContent = activeOrders;
            document.getElementById('todayWaste').textContent = totalTodayWaste.toFixed(1) + 'kg';
            document.getElementById('lastCleaning').textContent = lastCleaning;

            document.getElementById('todayDrumWaste').textContent = todayDrum.toFixed(1) + 'kg';
            document.getElementById('todayMagnetWaste').textContent = todayMagnet.toFixed(1) + 'kg';
            document.getElementById('todaySeparatorWaste').textContent = todaySeparator.toFixed(1) + 'kg';

            // Update current processing
            const processingOrders = orders.filter(o => ['Transfer to Pre-cleaning', 'Condense Cleaning', 'Milly Cleaning', 'Processing'].includes(o.status));
            const currentProcessingDiv = document.getElementById('currentProcessing');

            if (processingOrders.length === 0) {
                currentProcessingDiv.innerHTML = '<p style="color: #666; text-align: center; margin-top: 20px;">No orders currently processing</p>';
            } else {
                currentProcessingDiv.innerHTML = processingOrders.map(order => `
                    <div style="margin-bottom: 10px; padding: 10px; background: rgba(102, 126, 234, 0.1); border-radius: 8px;">
                        <strong>${order.id}</strong> - ${order.customer}<br>
                        <span class="status-badge status-${order.status.toLowerCase().replace(/ /g, '').replace('-', '')}">${order.status}</span>
                        <div style="font-size: 0.9em; color: #666; margin-top: 5px;">Bin: ${order.binNo || 'N/A'} | ${order.quantity}t</div>
                    </div>
                `).join('');
            }
        }

        function updateOrdersTable() {
            const tbody = document.getElementById('ordersTable');
            tbody.innerHTML = orders.map(order => {
                const progress = getOrderProgress(order.status);
                const mixInfo = `HD:${order.hdPercentage}% LMQ:${order.lmqPercentage}% MQ:${order.mqPercentage}%`;
                return `
                    <tr>
                        <td><strong>${order.id}</strong></td>
                        <td>${order.customer}</td>
                        <td>${order.quantity}t</td>
                        <td style="font-size: 0.8em;">${mixInfo}</td>
                        <td><span class="status-badge status-${order.status.toLowerCase().replace(/ /g, '').replace('-', '')}">${order.status}</span></td>
                        <td>${order.binNo || '-'}</td>
                        <td>
                            <div class="progress-bar" style="width: 80px;">
                                <div class="progress-fill" style="width: ${progress}%"></div>
                            </div>
                            <small>${progress}%</small>
                        </td>
                        <td>
                            <button class="btn btn-secondary btn-small" onclick="advanceOrder('${order.id}')">
                                Next Stage
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function updateInventoryDisplay() {
            document.getElementById('hdStock').textContent = inventory.HD.toFixed(1);
            document.getElementById('lmqStock').textContent = inventory.LMQ.toFixed(1);
            document.getElementById('mqStock').textContent = inventory.MQ.toFixed(1);
        }

        function updateWasteDisplay() {
            // Update totals
            const totalDrum = wasteEntries.filter(w => w.machine === 'drum').reduce((sum, w) => sum + w.weight, 0);
            const totalMagnet = wasteEntries.filter(w => w.machine === 'magnet').reduce((sum, w) => sum + w.weight, 0);
            const totalSeparator = wasteEntries.filter(w => w.machine === 'separator').reduce((sum, w) => sum + w.weight, 0);

            document.getElementById('totalDrumWaste').textContent = totalDrum.toFixed(1);
            document.getElementById('totalMagnetWaste').textContent = totalMagnet.toFixed(1);
            document.getElementById('totalSeparatorWaste').textContent = totalSeparator.toFixed(1);

            // Update table
            const tbody = document.getElementById('wasteTable');
            tbody.innerHTML = wasteEntries.slice(-20).reverse().map(waste => `
                <tr>
                    <td>${new Date(waste.date).toLocaleDateString()}</td>
                    <td>${getMachineName(waste.machine)}</td>
                    <td>${waste.wasteType}</td>
                    <td>${waste.weight}kg</td>
                    <td>${waste.orderId || '-'}</td>
                    <td>${waste.notes}</td>
                </tr>
            `).join('');
        }

        function updateCleaningDisplay() {
            const container = document.getElementById('cleaningLogs');
            if (cleaningLogs.length === 0) {
                container.innerHTML = '<div class="alert alert-info">No cleaning activities logged yet.</div>';
                return;
            }

            container.innerHTML = cleaningLogs.slice(-10).reverse().map(log => `
                <div class="cleaning-log">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                        <h4>${getMachineName(log.machine)} - ${log.type.charAt(0).toUpperCase() + log.type.slice(1)} Cleaning</h4>
                        <span style="background: #28a745; color: white; padding: 5px 10px; border-radius: 15px; font-size: 0.8em;">
                            ${log.duration} mins
                        </span>
                    </div>
                    <div style="font-size: 0.9em; color: #666; margin-bottom: 8px;">
                        📅 ${new Date(log.date).toLocaleString()}
                        ${log.evidencePhoto ? ' | 📸 Photo Evidence Uploaded' : ''}
                    </div>
                    ${log.notes ? `<div style="font-style: italic;">"${log.notes}"</div>` : ''}
                </div>
            `).join('');
        }

        function updateBinsDisplay() {
            updateBinSection('condenseBins', bins.condense, 'Condense');
            updateBinSection('millyBins', bins.milly, 'Milly');
        }

        function updateBinSection(containerId, binArray, type) {
            const container = document.getElementById(containerId);
            container.innerHTML = binArray.map(bin => {
                const isOccupied = bin.occupied > 0;
                const utilizationPerc = ((bin.occupied / bin.capacity) * 100).toFixed(1);
                const timeInfo = bin.startTime ? `<div style="font-size: 0.8em; color: #666;">Started: ${new Date(bin.startTime).toLocaleString()}</div>` : '';

                return `
                    <div class="bin-item ${isOccupied ? 'occupied' : 'available'}">
                        <h4>${type} Bin ${bin.id}</h4>
                        <div style="font-size: 1.2em; margin: 10px 0;">
                            ${bin.occupied.toFixed(1)}/${bin.capacity}t
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${utilizationPerc}%"></div>
                        </div>
                        <div style="font-size: 0.9em; margin: 5px 0;">${utilizationPerc}% utilized</div>
                        ${bin.orderId ? `<div style="font-size: 0.9em; color: #333; margin-bottom: 5px;">Order: ${bin.orderId}</div>` : ''}
                        ${timeInfo}
                        <div style="margin-top: 10px;">
                            <button class="btn btn-warning btn-small" onclick="editBin('${type.toLowerCase()}', ${bin.id})" style="font-size: 0.8em; padding: 5px 10px;">
                                Edit
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function editBin(binType, binId) {
            document.getElementById('binType').value = binType;
            updateBinNumbers();
            document.getElementById('binNumber').value = binId;
            showModal('binModal');
        }

        function getOrderProgress(status) {
            const stages = {
                'Created': 10,
                'Transfer to Pre-cleaning': 25,
                'Condense Cleaning': 50,
                'Milly Cleaning': 75,
                'Processing': 90,
                'Ready for Delivery': 100,
                'Completed': 100
            };
            return stages[status] || 0;
        }

        function advanceOrder(orderId) {
            const order = orders.find(o => o.id === orderId);
            if (!order) return;

            const stageFlow = ['Created', 'Transfer to Pre-cleaning', 'Condense Cleaning', 'Milly Cleaning', 'Processing', 'Ready for Delivery', 'Completed'];
            const currentIndex = stageFlow.indexOf(order.status);

            if (currentIndex < stageFlow.length - 1) {
                if (order.binNo) {
                    releaseBin(order.status, order.binNo, orderId);
                }

                order.status = stageFlow[currentIndex + 1];
                order.binNo = null;

                if (['Condense Cleaning', 'Milly Cleaning'].includes(order.status)) {
                    alert(`Order ${orderId} moved to ${order.status}. Please manually assign a bin using the Bin Management section.`);
                }

                saveData();
                updateAllDisplays();
                alert(`Order ${orderId} advanced to ${order.status}`);
            }
        }

        function releaseBin(stage, binNo, orderId) {
            let binType;
            if (stage === 'Condense Cleaning') binType = 'condense';
            else if (stage === 'Milly Cleaning') binType = 'milly';
            else return;

            const bin = bins[binType].find(b => b.id === binNo && b.orderId === orderId);
            if (bin) {
                bin.occupied = 0;
                bin.orderId = null;
                bin.startTime = null;
            }
        }

        function updateAllDisplays() {
            updateDashboard();
            updateOrdersTable();
            updateInventoryDisplay();
            updateWasteDisplay();
            updateCleaningDisplay();
            updateBinsDisplay();
        }

        function saveData() {
            localStorage.setItem('wheatOrders', JSON.stringify(orders));
            localStorage.setItem('wheatInventory', JSON.stringify(inventory));
            localStorage.setItem('wasteEntries', JSON.stringify(wasteEntries));
            localStorage.setItem('cleaningLogs', JSON.stringify(cleaningLogs));
            localStorage.setItem('wheatBins', JSON.stringify(bins));
        }

        // Auto-update percentage fields
        document.getElementById('hdPercentage').addEventListener('input', updatePercentages);
        document.getElementById('lmqPercentage').addEventListener('input', updatePercentages);
        document.getElementById('mqPercentage').addEventListener('input', updatePercentages);

        function updatePercentages() {
            const hd = parseFloat(document.getElementById('hdPercentage').value) || 0;
            const lmq = parseFloat(document.getElementById('lmqPercentage').value) || 0;
            const mq = parseFloat(document.getElementById('mqPercentage').value) || 0;
            const total = hd + lmq + mq;

            const inputs = [document.getElementById('hdPercentage'), document.getElementById('lmqPercentage'), document.getElementById('mqPercentage')];
            const errorDiv = document.getElementById('percentageError');

            if (Math.abs(total - 100) > 0.1) {
                inputs.forEach(input => input.style.borderColor = '#d32f2f');
                errorDiv.style.display = 'block';
            } else {
                inputs.forEach(input => input.style.borderColor = '#e0e0e0');
                errorDiv.style.display = 'none';
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }

        // File upload handling
        document.getElementById('evidencePhoto').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const uploadArea = document.querySelector('.file-upload-area');
                uploadArea.innerHTML = `
                    <p>📸 Photo selected: ${file.name}</p>
                    <small>Click to change photo</small>
                `;
                uploadArea.style.borderColor = '#28a745';
                uploadArea.style.backgroundColor = '#f8f9fa';
            }
        });

        // Initialize the application
        function init() {
            updateAllDisplays();

            // Set up automatic cleaning reminders (every 3 hours)
            setInterval(() => {
                const lastCleaning = cleaningLogs.length > 0 ? new Date(cleaningLogs[cleaningLogs.length - 1].date) : new Date(0);
                const timeSinceLastCleaning = Date.now() - lastCleaning.getTime();
                const threeHours = 3 * 60 * 60 * 1000;

                if (timeSinceLastCleaning > threeHours) {
                    if (confirm('It has been more than 3 hours since the last cleaning. Would you like to log a cleaning activity?')) {
                        showModal('cleaningModal');
                    }
                }
            }, 30 * 60 * 1000); // Check every 30 minutes
        }

        // Start the application
        init();
    </script>
</body>
</html>