<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wheat Flow Mill Management System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

            .header h1 {
                color: #2c3e50;
                font-size: 2.5em;
                margin-bottom: 10px;
            }

            .header p {
                color: #7f8c8d;
                font-size: 1.1em;
            }

        .nav-tabs {
            display: flex;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            padding: 5px;
            margin-bottom: 30px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            flex-wrap: wrap;
        }

        .nav-tab {
            flex: 1;
            min-width: 140px;
            padding: 15px 10px;
            text-align: center;
            background: transparent;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9em;
            font-weight: 500;
        }

            .nav-tab.active {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
            }

            .nav-tab:hover:not(.active) {
                background: rgba(102, 126, 234, 0.1);
            }

        .tab-content {
            display: none;
        }

            .tab-content.active {
                display: block;
            }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            transition: transform 0.3s ease;
        }

            .card:hover {
                transform: translateY(-5px);
            }

            .card h3 {
                color: #2c3e50;
                margin-bottom: 15px;
                font-size: 1.3em;
            }

        .flow-stage {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 5px solid;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .stage-godavan {
            border-left-color: #4caf50;
        }

        .stage-transfer {
            border-left-color: #ff9800;
        }

        .stage-precleaning {
            border-left-color: #2196f3;
        }

        .waste-category {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0;
            border-left: 4px solid;
        }

        .category-drum {
            border-left-color: #e74c3c;
        }

        .category-magnet {
            border-left-color: #9b59b6;
        }

        .category-separator {
            border-left-color: #3498db;
        }

        .photo-capture {
            border: 2px dashed #ddd;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            margin: 15px 0;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .photo-capture:hover {
                border-color: #667eea;
                background: rgba(102, 126, 234, 0.05);
            }

            .photo-capture.has-photo {
                border-color: #28a745;
                background: rgba(40, 167, 69, 0.05);
            }

        .photo-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 15px 0;
        }

        .photo-item {
            position: relative;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

            .photo-item img {
                width: 100%;
                height: 150px;
                object-fit: cover;
            }

        .photo-info {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px;
            font-size: 0.8em;
        }

        .form-group {
            margin-bottom: 20px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: 500;
                color: #2c3e50;
            }

            .form-group input, .form-group select, .form-group textarea {
                width: 100%;
                padding: 12px;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                font-size: 1em;
                transition: border-color 0.3s ease;
            }

                .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
                    outline: none;
                    border-color: #667eea;
                }

        .form-row {
            display: flex;
            gap: 15px;
        }

            .form-row .form-group {
                flex: 1;
            }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 500;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
            }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-warning {
            background: #ffc107;
            color: #212529;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-small {
            padding: 8px 15px;
            font-size: 0.9em;
        }

        .table-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

            .table th, .table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #e0e0e0;
            }

            .table th {
                background: #f8f9fa;
                font-weight: 600;
                color: #2c3e50;
            }

            .table tr:hover {
                background: rgba(102, 126, 234, 0.05);
            }

        .status-badge {
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: 500;
            text-transform: uppercase;
        }

        .status-active {
            background: #e8f5e8;
            color: #2e7d32;
        }

        .status-pending {
            background: #fff3e0;
            color: #f57c00;
        }

        .status-completed {
            background: #f5f5f5;
            color: #616161;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 15px;
            max-width: 700px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
        }

        .close {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 28px;
            cursor: pointer;
            color: #999;
        }

            .close:hover {
                color: #333;
            }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 8px;
            border-left: 4px solid;
        }

        .alert-info {
            background: #e8f4fd;
            border-color: #1e88e5;
            color: #1565c0;
        }

        .alert-warning {
            background: #fff8e1;
            border-color: #ffc107;
            color: #f57c00;
        }

        .alert-success {
            background: #e8f5e8;
            border-color: #4caf50;
            color: #2e7d32;
        }

        .alert-danger {
            background: #ffebee;
            border-color: #f44336;
            color: #c62828;
        }

        .cycle-indicator {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 10px 15px;
            border-radius: 25px;
            display: inline-block;
            font-weight: 500;
            margin: 10px 0;
        }

        .timer-display {
            font-size: 1.5em;
            color: #667eea;
            font-weight: bold;
            text-align: center;
            margin: 15px 0;
        }

        .waste-storage-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .storage-item {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            border-left: 4px solid;
        }

        .flow-arrow {
            font-size: 2em;
            color: #667eea;
            text-align: center;
            margin: 20px 0;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: #28a745;
            transition: width 0.3s ease;
        }

        @@media (max-width: 768px) {
            .nav-tabs {
                flex-direction: column;
            }

            .dashboard-grid {
                grid-template-columns: 1fr;
            }

            .form-row {
                flex-direction: column;
            }

            .photo-grid {
                grid-template-columns: 1fr 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🌾 Wheat Flow Mill Management System</h1>
            <p>Complete monitoring and documentation system for wheat processing operations</p>
        </div>

        <!-- Navigation Tabs -->
        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('flow-monitoring')">📊 Flow Monitoring</button>
            <button class="nav-tab" onclick="showTab('photo-capture')">📸 Photo Capture</button>
            <button class="nav-tab" onclick="showTab('waste-categories')">🗑️ Waste Categories</button>
            <button class="nav-tab" onclick="showTab('waste-storage')">📦 Waste Storage</button>
            <button class="nav-tab" onclick="showTab('daily-logs')">📋 Daily Logs</button>
            <button class="nav-tab" onclick="showTab('reports')">📈 Reports</button>
        </div>

        <!-- Flow Monitoring Tab -->
        <div id="flow-monitoring" class="tab-content active">
            <div class="dashboard-grid">
                <!-- Current Flow Status -->
                <div class="card">
                    <h3>📊 Current Flow Status</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; text-align: center;">
                        <div>
                            <div style="font-size: 2em; color: #4caf50;" id="godavanRemaining">500.0t</div>
                            <div style="color: #666;">Godavan Remaining</div>
                        </div>
                        <div>
                            <div style="font-size: 2em; color: #2196f3;" id="transferredToday">120.5t</div>
                            <div style="color: #666;">Transferred Today</div>
                        </div>
                        <div>
                            <div style="font-size: 2em; color: #ff9800;" id="precleaningBin">45.2t</div>
                            <div style="color: #666;">Pre-cleaning Bin</div>
                        </div>
                        <div>
                            <div style="font-size: 2em; color: #e74c3c;" id="totalWasteToday">5.8kg</div>
                            <div style="color: #666;">Total Waste Today</div>
                        </div>
                    </div>
                </div>

                <!-- Cleaning Cycle Status -->
                <div class="card">
                    <h3>🔄 Cleaning Cycle Status</h3>
                    <div class="cycle-indicator" id="currentCycle">Cycle 1 of 8</div>
                    <div class="timer-display" id="cycleTimer">02:45:30</div>
                    <div style="color: #666; margin: 10px 0;">Last cleaned: <span id="lastCleaned">2 hours 45 minutes ago</span></div>
                    <div style="display: flex; gap: 10px; margin-top: 15px;">
                        <button class="btn btn-primary btn-small" onclick="startNewCycle()">🔄 Start New Cycle</button>
                        <button class="btn btn-warning btn-small" onclick="showModal('cleaningModal')">🧹 Log Cleaning</button>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="card">
                    <h3>⚡ Quick Actions</h3>
                    <div style="display: grid; gap: 10px;">
                        <button class="btn btn-primary btn-small" onclick="showModal('transferModal')">➡️ Start Transfer</button>
                        <button class="btn btn-success btn-small" onclick="markBinFull()">✅ Mark Bin Full</button>
                        <button class="btn btn-warning btn-small" onclick="showModal('wasteLogModal')">📦 Log Waste</button>
                        <button class="btn btn-danger btn-small" onclick="showModal('emergencyStopModal')">⚠️ Emergency Stop</button>
                    </div>
                </div>
            </div>

            <!-- Flow Stages -->
            <div class="flow-stage stage-godavan">
                <h3>🏭 Godavan Stock</h3>
                <div style="font-size: 2em; margin: 10px 0;"><span id="godavanStock">500.0</span>t</div>
                <p>Current wheat stock in Godavan ready for processing</p>
            </div>

            <div class="flow-arrow">⬇️</div>

            <div class="flow-stage stage-transfer">
                <h3>🚛 Transfer Process</h3>
                <div id="activeTransfers">
                    <div class="alert alert-info">No active transfers at the moment</div>
                </div>
            </div>

            <div class="flow-arrow">⬇️</div>

            <div class="flow-stage stage-precleaning">
                <h3>🧹 Pre-cleaning Bin</h3>
                <div style="font-size: 2em; margin: 10px 0;"><span id="precleaningStock">45.2</span>t</div>
                <p>Wheat ready for cleaning cycles. Capacity: 65t</p>
            </div>
        </div>

        <!-- Photo Capture Tab -->
        <div id="photo-capture" class="tab-content">
            <div class="dashboard-grid">
                <div class="card">
                    <h3>📸 Capture Cleaning Photos</h3>
                    <form id="photoCaptureForm">
                        <div class="form-group">
                            <label for="photoType">Photo Type:</label>
                            <select id="photoType" required>
                                <option value="">Select Type</option>
                                <option value="before">Before Cleaning</option>
                                <option value="after">After Cleaning</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="photoCycle">Cleaning Cycle:</label>
                            <select id="photoCycle" required>
                                <option value="">Select Cycle</option>
                                <option value="1">Cycle 1 (0-3 hours)</option>
                                <option value="2">Cycle 2 (3-6 hours)</option>
                                <option value="3">Cycle 3 (6-9 hours)</option>
                                <option value="4">Cycle 4 (9-12 hours)</option>
                                <option value="5">Cycle 5 (12-15 hours)</option>
                                <option value="6">Cycle 6 (15-18 hours)</option>
                                <option value="7">Cycle 7 (18-21 hours)</option>
                                <option value="8">Cycle 8 (21-24 hours)</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="magnetLocation">Magnet Location:</label>
                            <select id="magnetLocation" required>
                                <option value="">Select Location</option>
                                <option value="drum-shield">Drum Shield Magnet</option>
                                <option value="main-magnet">Main Magnet Machine</option>
                                <option value="separator-magnet">Separator Magnet</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Upload Photos:</label>
                            <div class="photo-capture" onclick="document.getElementById('photoFiles').click()">
                                <p>📸 Click to capture/upload photos</p>
                                <small>Multiple photos allowed (JPG, PNG, WebP)</small>
                                <div id="photoPreview"></div>
                            </div>
                            <input type="file" id="photoFiles" accept="image/*" multiple style="display: none;">
                        </div>
                        <div class="form-group">
                            <label for="photoNotes">Photo Notes:</label>
                            <textarea id="photoNotes" rows="3" placeholder="Describe what the photos show, any issues found, etc."></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Save Photos</button>
                    </form>
                </div>

                <div class="card">
                    <h3>🧲 Magnet Photos</h3>
                    <div id="magnetPhotos">
                        <div class="alert alert-info">No photos captured yet.</div>
                    </div>
                </div>

                <div class="card">
                    <h3>📅 Today's Photo Sessions</h3>
                    <div id="photoSessions">
                        <div class="alert alert-warning">No photo sessions completed today.</div>
                    </div>
                </div>
            </div>

            <!-- Photo History Table -->
            <div class="table-container">
                <h3>📸 Photo History</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date/Time</th>
                            <th>Cycle</th>
                            <th>Location</th>
                            <th>Before Photos</th>
                            <th>After Photos</th>
                            <th>Notes</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="photoHistoryTable">
                        <!-- Dynamic content -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Waste Categories Tab -->
        <div id="waste-categories" class="tab-content">
            <div class="dashboard-grid">
                <div class="card">
                    <h3>🗑️ Waste Categories</h3>
                    <button class="btn btn-primary" onclick="showModal('categoryModal')" style="margin-bottom: 15px;">➕ Add New Category</button>
                    <div id="wasteCategories">
                        <!-- Dynamic content -->
                    </div>
                </div>
            </div>

            <!-- Categories Table -->
            <div class="table-container">
                <h3>📊 Categories Overview</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Machine</th>
                            <th>Waste Types</th>
                            <th>Today's Collection</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="categoriesTable">
                        <!-- Dynamic content -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Waste Storage Tab -->
        <div id="waste-storage" class="tab-content">
            <div class="dashboard-grid">
                <div class="card">
                    <h3>📦 Log Waste Collection</h3>
                    <button class="btn btn-primary" onclick="showModal('wasteLogModal')">➕ Log New Waste</button>
                </div>
            </div>

            <!-- Storage Overview -->
            <div class="card">
                <h3>🏪 Storage Locations</h3>
                <div class="waste-storage-grid" id="wasteStorageGrid">
                    <!-- Dynamic content -->
                </div>
            </div>

            <!-- Waste Log Table -->
            <div class="table-container">
                <h3>📋 Waste Collection Log</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date/Time</th>
                            <th>Category</th>
                            <th>Weight</th>
                            <th>Storage Location</th>
                            <th>Operator</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody id="wasteLogTable">
                        <!-- Dynamic content -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Daily Logs Tab -->
        <div id="daily-logs" class="tab-content">
            <div class="dashboard-grid">
                <div class="card">
                    <h3>📅 Today's Summary</h3>
                    <div id="dailySummary">
                        <!-- Dynamic content -->
                    </div>
                    <button class="btn btn-primary btn-small" onclick="generateDailyReport()" style="margin-top: 15px;">📋 Generate Daily Report</button>
                </div>

                <div class="card">
                    <h3>🚨 Alerts & Notifications</h3>
                    <div id="alertsSection">
                        <!-- Dynamic content -->
                    </div>
                </div>

                <div class="card">
                    <h3>⚙️ System Actions</h3>
                    <div style="display: grid; gap: 10px;">
                        <button class="btn btn-warning btn-small" onclick="resetDailyData()">🔄 Reset Daily Data</button>
                        <button class="btn btn-secondary btn-small" onclick="backupData()">💾 Backup Data</button>
                        <button class="btn btn-secondary btn-small" onclick="restoreData()">📥 Restore Data</button>
                        <button class="btn btn-success btn-small" onclick="exportData()">📤 Export All Data</button>
                    </div>
                </div>
            </div>

            <!-- Daily Logs Table -->
            <div class="table-container">
                <h3>📈 Daily Operations History</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Godavan Start</th>
                            <th>Godavan End</th>
                            <th>Total Transferred</th>
                            <th>Total Waste</th>
                            <th>Cleaning Cycles</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="dailyLogsTable">
                        <!-- Dynamic content -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Reports Tab -->
        <div id="reports" class="tab-content">
            <div class="dashboard-grid">
                <div class="card">
                    <h3>📊 Weekly Statistics</h3>
                    <div id="weeklyStats">
                        <!-- Dynamic content -->
                    </div>
                </div>

                <div class="card">
                    <h3>⚡ Process Efficiency</h3>
                    <div id="efficiencyMetrics">
                        <!-- Dynamic content -->
                    </div>
                </div>

                <div class="card">
                    <h3>🗑️ Waste Analysis</h3>
                    <div id="wasteAnalysis">
                        <!-- Dynamic content -->
                    </div>
                </div>

                <div class="card">
                    <h3>📸 Photo Compliance</h3>
                    <div id="photoCompliance">
                        <!-- Dynamic content -->
                    </div>
                </div>
            </div>

            <!-- Custom Report Generation -->
            <div class="card">
                <h3>📋 Generate Custom Report</h3>
                <button class="btn btn-primary" onclick="showModal('reportModal')">📈 Create Report</button>
            </div>
        </div>
    </div>

    <!-- Modals -->
    <!-- Transfer Modal -->
    <div id="transferModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('transferModal')">&times;</span>
            <h2>🚛 Start Transfer Process</h2>
            <form id="transferForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="transferQuantity">Quantity (tons):</label>
                        <input type="number" id="transferQuantity" required min="0.1" step="0.1" max="500">
                    </div>
                    <div class="form-group">
                        <label for="transferRate">Transfer Rate (t/hr):</label>
                        <input type="number" id="transferRate" required min="1" step="0.1" value="10">
                    </div>
                </div>
                <div class="form-group">
                    <label for="operatorName">Operator Name:</label>
                    <input type="text" id="operatorName" required>
                </div>
                <div class="form-group">
                    <label for="transferNotes">Notes:</label>
                    <textarea id="transferNotes" rows="3" placeholder="Additional notes about the transfer..."></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Start Transfer</button>
            </form>
        </div>
    </div>

    <!-- Cleaning Modal -->
    <div id="cleaningModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('cleaningModal')">&times;</span>
            <h2>🧹 Log Cleaning Process</h2>
            <form id="cleaningForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="cleaningCycle">Cleaning Cycle:</label>
                        <select id="cleaningCycle" required>
                            <option value="">Select Cycle</option>
                            <option value="1">Cycle 1 (0-3 hours)</option>
                            <option value="2">Cycle 2 (3-6 hours)</option>
                            <option value="3">Cycle 3 (6-9 hours)</option>
                            <option value="4">Cycle 4 (9-12 hours)</option>
                            <option value="5">Cycle 5 (12-15 hours)</option>
                            <option value="6">Cycle 6 (15-18 hours)</option>
                            <option value="7">Cycle 7 (18-21 hours)</option>
                            <option value="8">Cycle 8 (21-24 hours)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="cleaningDuration">Duration (minutes):</label>
                        <input type="number" id="cleaningDuration" required min="1" step="1" value="30">
                    </div>
                </div>
                <div class="form-group">
                    <label for="wasteCollected">Waste Collected (kg):</label>
                    <input type="number" id="wasteCollected" required min="0" step="0.1">
                </div>
                <div class="form-group">
                    <label for="cleaningOperator">Operator Name:</label>
                    <input type="text" id="cleaningOperator" required>
                </div>
                <div class="form-group">
                    <label for="cleaningNotes">Notes:</label>
                    <textarea id="cleaningNotes" rows="3" placeholder="Cleaning details, any issues found, etc."></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Log Cleaning</button>
            </form>
        </div>
    </div>

    <!-- Waste Category Modal -->
    <div id="categoryModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('categoryModal')">&times;</span>
            <h2>🗑️ Manage Waste Category</h2>
            <form id="categoryForm">
                <input type="hidden" id="categoryId">
                <div class="form-group">
                    <label for="categoryName">Category Name:</label>
                    <input type="text" id="categoryName" required placeholder="e.g., Drum Shield">
                </div>
                <div class="form-group">
                    <label for="categoryMachine">Machine/Equipment:</label>
                    <input type="text" id="categoryMachine" required placeholder="e.g., Drum Shield Machine">
                </div>
                <div class="form-group">
                    <label for="categoryWasteTypes">Waste Types (comma separated):</label>
                    <textarea id="categoryWasteTypes" rows="3" required placeholder="e.g., Plastic, Cotton string, Thread (Dhaga), Foreign materials"></textarea>
                </div>
                <div class="form-group">
                    <label for="categoryColor">Category Color:</label>
                    <select id="categoryColor" required>
                        <option value="">Select Color</option>
                        <option value="#e74c3c">Red (Drum Shield)</option>
                        <option value="#9b59b6">Purple (Magnet)</option>
                        <option value="#3498db">Blue (Separator)</option>
                        <option value="#f39c12">Orange (Other)</option>
                        <option value="#27ae60">Green (General)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="categoryDescription">Description:</label>
                    <textarea id="categoryDescription" rows="3" placeholder="Detailed description of what this category collects..."></textarea>
                </div>
                <div style="display: flex; gap: 10px;">
                    <button type="submit" class="btn btn-primary">Save Category</button>
                    <button type="button" class="btn btn-danger" onclick="deleteCategory()" id="deleteBtn" style="display: none;">Delete</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Waste Log Modal -->
    <div id="wasteLogModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('wasteLogModal')">&times;</span>
            <h2>📦 Log Waste Collection</h2>
            <form id="wasteLogForm">
                <div class="form-group">
                    <label for="wasteCategory">Waste Category:</label>
                    <select id="wasteCategory" required>
                        <option value="">Select Category</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="wasteWeight">Weight (kg):</label>
                    <input type="number" id="wasteWeight" required min="0" step="0.1">
                </div>
                <div class="form-group">
                    <label for="storageLocation">Storage Location:</label>
                    <select id="storageLocation" required>
                        <option value="">Select Location</option>
                        <option value="container-1">Container 1 (Drum Waste)</option>
                        <option value="container-2">Container 2 (Magnet Waste)</option>
                        <option value="container-3">Container 3 (Separator Waste)</option>
                        <option value="yard-area">Yard Area</option>
                        <option value="disposal-area">Disposal Area</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="wasteOperator">Collected By:</label>
                    <input type="text" id="wasteOperator" required>
                </div>
                <div class="form-group">
                    <label for="wasteLogNotes">Notes:</label>
                    <textarea id="wasteLogNotes" rows="3" placeholder="Additional notes about the waste collection..."></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Log Waste</button>
            </form>
        </div>
    </div>

    <!-- Emergency Stop Modal -->
    <div id="emergencyStopModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('emergencyStopModal')">&times;</span>
            <h2>⚠️ Emergency Stop</h2>
            <div class="alert alert-danger">
                <strong>Warning:</strong> This will immediately stop the wheat transfer process.
            </div>
            <form id="emergencyStopForm">
                <div class="form-group">
                    <label for="emergencyReason">Reason for Emergency Stop:</label>
                    <select id="emergencyReason" required>
                        <option value="">Select Reason</option>
                        <option value="equipment-failure">Equipment Failure</option>
                        <option value="safety-concern">Safety Concern</option>
                        <option value="quality-issue">Quality Issue</option>
                        <option value="maintenance-required">Urgent Maintenance Required</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="emergencyDetails">Details:</label>
                    <textarea id="emergencyDetails" rows="4" required placeholder="Provide detailed explanation of the emergency..."></textarea>
                </div>
                <div class="form-group">
                    <label for="emergencyOperator">Operator Name:</label>
                    <input type="text" id="emergencyOperator" required>
                </div>
                <div style="display: flex; gap: 10px;">
                    <button type="submit" class="btn btn-danger">Confirm Emergency Stop</button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal('emergencyStopModal')">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Report Modal -->
    <div id="reportModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal('reportModal')">&times;</span>
            <h2>📋 Generate Custom Report</h2>
            <form id="reportForm">
                <div class="form-group">
                    <label for="reportType">Report Type:</label>
                    <select id="reportType" required>
                        <option value="">Select Report Type</option>
                        <option value="daily">Daily Operations Report</option>
                        <option value="weekly">Weekly Summary Report</option>
                        <option value="waste">Waste Analysis Report</option>
                        <option value="photo">Photo Compliance Report</option>
                        <option value="efficiency">Process Efficiency Report</option>
                    </select>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="reportStartDate">Start Date:</label>
                        <input type="date" id="reportStartDate" required>
                    </div>
                    <div class="form-group">
                        <label for="reportEndDate">End Date:</label>
                        <input type="date" id="reportEndDate" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="reportFormat">Export Format:</label>
                    <select id="reportFormat" required>
                        <option value="pdf">PDF Report</option>
                        <option value="excel">Excel Spreadsheet</option>
                        <option value="csv">CSV Data</option>
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Generate Report</button>
            </form>
        </div>
    </div>

    <script>
        // Initialize data structures - Using memory storage instead of localStorage
        let flowData = {
            godavanStock: 500.0,
            precleaningStock: 45.2,
            transferredToday: 120.5,
            totalWasteToday: 5.8,
            currentCycle: 1,
            lastCleaned: new Date(Date.now() - 2.75 * 60 * 60 * 1000), // 2 hours 45 minutes ago
            cycleStartTime: new Date()
        };

        let wasteCategories = [
            {
                id: 'drum-shield',
                name: 'Drum Shield',
                machine: 'Drum Shield Machine',
                wasteTypes: 'Plastic, Cotton string, Thread (Dhaga), Foreign materials',
                color: '#e74c3c',
                description: 'Collects plastic materials, cotton strings, threads and other foreign materials during initial cleaning'
            },
            {
                id: 'magnets-machine',
                name: 'Magnets Machine',
                machine: 'Magnetic Separator',
                wasteTypes: 'Metal particles, Iron pieces, Magnetic materials',
                color: '#9b59b6',
                description: 'Separates and collects all magnetic and metallic materials from wheat'
            },
            {
                id: 'separator',
                name: 'Separator',
                machine: 'Gravity Separator',
                wasteTypes: 'Stones, Heavy particles, Dense materials',
                color: '#3498db',
                description: 'Removes stones and other heavy particles based on density separation'
            }
        ];

        let photoSessions = [];
        let wasteLog = [];
        let transferLog = [];
        let cleaningLog = [];
        let dailyLogs = [];

        // Cycle timer
        let cycleTimer = null;

        // Generate sample data
        function generateSampleData() {
            // Update active transfers
            const activeTransfersDiv = document.getElementById('activeTransfers');
            const activeTransfers = transferLog.filter(t => t.status === 'Active');

            if (activeTransfers.length === 0) {
                activeTransfersDiv.innerHTML = '<div class="alert alert-info">No active transfers at the moment</div>';
            } else {
                activeTransfersDiv.innerHTML = activeTransfers.map(transfer => `
                    <div style="background: #fff3e0; padding: 10px; margin: 5px 0; border-radius: 8px; border-left: 4px solid #ff9800;">
                        <strong>Transfer ${transfer.id}</strong> - ${transfer.quantity}t at ${transfer.rate}t/hr
                        <div style="font-size: 0.9em; color: #666;">Operator: ${transfer.operator}</div>
                    </div>
                `).join('');
            }
        }

        function updateCycleTimer() {
            const cycleStart = new Date(flowData.cycleStartTime);
            const now = new Date();
            const elapsed = now - cycleStart;
            const threeHours = 3 * 60 * 60 * 1000;
            const remaining = Math.max(0, threeHours - elapsed);

            const hours = Math.floor(remaining / (60 * 60 * 1000));
            const minutes = Math.floor((remaining % (60 * 60 * 1000)) / (60 * 1000));
            const seconds = Math.floor((remaining % (60 * 1000)) / 1000);

            document.getElementById('cycleTimer').textContent =
                `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

            if (remaining === 0) {
                alert('3-hour cleaning cycle is due!');
            }
        }

        function updatePhotoCaptureDisplay() {
            // Update magnet photos
            const magnetPhotosDiv = document.getElementById('magnetPhotos');
            if (photoSessions.length === 0) {
                magnetPhotosDiv.innerHTML = '<div class="alert alert-info">No photos captured yet.</div>';
            } else {
                const recentSessions = photoSessions.slice(-5);
                magnetPhotosDiv.innerHTML = recentSessions.map(session => `
                    <div style="background: #f8f9fa; padding: 10px; margin: 10px 0; border-radius: 8px;">
                        <strong>Cycle ${session.cycle}</strong> - ${new Date(session.date).toLocaleDateString()}
                        <div style="font-size: 0.9em; color: #666;">
                            Before: ${session.beforePhotos.length} | After: ${session.afterPhotos.length}
                        </div>
                    </div>
                `).join('');
            }

            // Update photo sessions today
            const today = new Date().toDateString();
            const todaySessions = photoSessions.filter(s => new Date(s.date).toDateString() === today);
            const photoSessionsDiv = document.getElementById('photoSessions');

            if (todaySessions.length === 0) {
                photoSessionsDiv.innerHTML = '<div class="alert alert-warning">No photo sessions completed today.</div>';
            } else {
                photoSessionsDiv.innerHTML = todaySessions.map(session => `
                    <div style="background: #e8f5e8; padding: 10px; margin: 5px 0; border-radius: 8px;">
                        <strong>Cycle ${session.cycle}</strong> - ${new Date(session.date).toLocaleTimeString()}
                        <div style="font-size: 0.8em; color: #666;">
                            Location: ${session.location} | Photos: ${session.beforePhotos.length + session.afterPhotos.length}
                        </div>
                    </div>
                `).join('');
            }

            // Update photo history table
            const tbody = document.getElementById('photoHistoryTable');
            tbody.innerHTML = photoSessions.slice(-20).reverse().map(session => `
                <tr>
                    <td>${new Date(session.date).toLocaleString()}</td>
                    <td>Cycle ${session.cycle}</td>
                    <td>${session.location}</td>
                    <td>${session.beforePhotos.length}</td>
                    <td>${session.afterPhotos.length}</td>
                    <td>${session.notes || '-'}</td>
                    <td>
                        <button class="btn btn-secondary btn-small" onclick="viewPhotos('${session.id}')">
                            👁️ View
                        </button>
                    </td>
                </tr>
            `).join('');
        }

        function updateWasteCategoriesDisplay() {
            // Update categories display
            const categoriesDiv = document.getElementById('wasteCategories');
            categoriesDiv.innerHTML = wasteCategories.map(category => `
                <div class="waste-category" style="border-left-color: ${category.color};">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="flex: 1;">
                            <h4>${category.name}</h4>
                            <div style="color: #666; margin: 5px 0;">
                                <strong>Machine:</strong> ${category.machine}
                            </div>
                            <div style="color: #666; margin: 5px 0;">
                                <strong>Waste Types:</strong> ${category.wasteTypes}
                            </div>
                            <div style="font-size: 0.9em; font-style: italic;">
                                ${category.description}
                            </div>
                        </div>
                        <div style="text-align: right;">
                            <button class="btn btn-warning btn-small" onclick="editCategory('${category.id}')" style="margin-bottom: 5px;">
                                ✏️ Edit
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');

            // Update categories table
            const tbody = document.getElementById('categoriesTable');
            tbody.innerHTML = wasteCategories.map(category => {
                const todayWaste = wasteLog
                    .filter(w => w.category === category.id && new Date(w.date).toDateString() === new Date().toDateString())
                    .reduce((sum, w) => sum + w.weight, 0);

                return `
                    <tr>
                        <td>
                            <div style="display: flex; align-items: center;">
                                <div style="width: 20px; height: 20px; background: ${category.color}; border-radius: 3px; margin-right: 10px;"></div>
                                ${category.name}
                            </div>
                        </td>
                        <td>${category.machine}</td>
                        <td style="font-size: 0.9em;">${category.wasteTypes}</td>
                        <td>${todayWaste.toFixed(1)}kg</td>
                        <td>
                            <button class="btn btn-warning btn-small" onclick="editCategory('${category.id}')">
                                ✏️ Edit
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
        }

        function updateWasteStorageDisplay() {
            // Update waste storage grid
            const storageGrid = document.getElementById('wasteStorageGrid');

            // Calculate storage by location
            const storageData = {};
            wasteLog.forEach(waste => {
                if (!storageData[waste.storageLocation]) {
                    storageData[waste.storageLocation] = {
                        total: 0,
                        categories: {}
                    };
                }
                storageData[waste.storageLocation].total += waste.weight;

                if (!storageData[waste.storageLocation].categories[waste.category]) {
                    storageData[waste.storageLocation].categories[waste.category] = 0;
                }
                storageData[waste.storageLocation].categories[waste.category] += waste.weight;
            });

            const storageLocations = [
                { id: 'container-1', name: 'Container 1', color: '#e74c3c' },
                { id: 'container-2', name: 'Container 2', color: '#9b59b6' },
                { id: 'container-3', name: 'Container 3', color: '#3498db' },
                { id: 'yard-area', name: 'Yard Area', color: '#f39c12' },
                { id: 'disposal-area', name: 'Disposal Area', color: '#27ae60' }
            ];

            storageGrid.innerHTML = storageLocations.map(location => {
                const data = storageData[location.id] || { total: 0, categories: {} };
                const categoryBreakdown = Object.entries(data.categories)
                    .map(([catId, weight]) => {
                        const category = wasteCategories.find(c => c.id === catId);
                        return `${category?.name || catId}: ${weight.toFixed(1)}kg`;
                    }).join('<br>');

                return `
                    <div class="storage-item" style="border-left-color: ${location.color};">
                        <h4>${location.name}</h4>
                        <div style="font-size: 1.5em; margin: 10px 0;">
                            ${data.total.toFixed(1)}kg
                        </div>
                        <div style="font-size: 0.8em; color: #666;">
                            ${categoryBreakdown || 'No waste stored'}
                        </div>
                    </div>
                `;
            }).join('');

            // Update waste log table
            const tbody = document.getElementById('wasteLogTable');
            tbody.innerHTML = wasteLog.slice(-30).reverse().map(waste => {
                const category = wasteCategories.find(c => c.id === waste.category);
                return `
                    <tr>
                        <td>${new Date(waste.date).toLocaleString()}</td>
                        <td>
                            <div style="display: flex; align-items: center;">
                                <div style="width: 15px; height: 15px; background: ${category?.color || '#ccc'}; border-radius: 3px; margin-right: 8px;"></div>
                                ${category?.name || waste.category}
                            </div>
                        </td>
                        <td>${waste.weight}kg</td>
                        <td>${waste.storageLocation}</td>
                        <td>${waste.operator}</td>
                        <td>${waste.notes || '-'}</td>
                    </tr>
                `;
            }).join('');
        }

        function updateDailyLogsDisplay() {
            // Update daily summary
            const today = new Date().toDateString();
            const todayWaste = wasteLog.filter(w => new Date(w.date).toDateString() === today);
            const todayTransfers = transferLog.filter(t => new Date(t.date).toDateString() === today);
            const todayCleanings = cleaningLog.filter(c => new Date(c.date).toDateString() === today);
            const todayPhotos = photoSessions.filter(p => new Date(p.date).toDateString() === today);

            const summaryDiv = document.getElementById('dailySummary');
            summaryDiv.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 0.9em;">
                    <div>Transfers: <strong>${todayTransfers.length}</strong></div>
                    <div>Cleaning Cycles: <strong>${todayCleanings.length}</strong></div>
                    <div>Waste Entries: <strong>${todayWaste.length}</strong></div>
                    <div>Photo Sessions: <strong>${todayPhotos.length}</strong></div>
                    <div>Total Waste: <strong>${flowData.totalWasteToday.toFixed(1)}kg</strong></div>
                    <div>Godavan Stock: <strong>${flowData.godavanStock.toFixed(1)}t</strong></div>
                </div>
            `;

            // Update alerts section
            const alertsDiv = document.getElementById('alertsSection');
            const alerts = [];

            // Check for overdue cleaning
            const timeSinceLastCleaning = Date.now() - new Date(flowData.lastCleaned).getTime();
            if (timeSinceLastCleaning > 3.5 * 60 * 60 * 1000) { // 3.5 hours
                alerts.push({
                    type: 'danger',
                    message: 'Cleaning cycle overdue! Last cleaned over 3.5 hours ago.'
                });
            }

            // Check for missing photos
            if (todayPhotos.length < flowData.currentCycle) {
                alerts.push({
                    type: 'warning',
                    message: `Missing photo sessions. Expected: ${flowData.currentCycle}, Actual: ${todayPhotos.length}`
                });
            }

            // Check for low Godavan stock
            if (flowData.godavanStock < 50) {
                alerts.push({
                    type: 'warning',
                    message: 'Low Godavan stock. Consider replenishment.'
                });
            }

            if (alerts.length === 0) {
                alertsDiv.innerHTML = '<div class="alert alert-success">All systems operating normally.</div>';
            } else {
                alertsDiv.innerHTML = alerts.map(alert =>
                    `<div class="alert alert-${alert.type}">${alert.message}</div>`
                ).join('');
            }

            // Update daily logs table
            const tbody = document.getElementById('dailyLogsTable');
            tbody.innerHTML = dailyLogs.slice(-15).reverse().map(log => `
                <tr>
                    <td>${log.date}</td>
                    <td>${log.godavanStart?.toFixed(1) || '-'}t</td>
                    <td>${log.godavanEnd?.toFixed(1) || '-'}t</td>
                    <td>${log.totalTransferred?.toFixed(1) || '-'}t</td>
                    <td>${log.totalWaste?.toFixed(1) || '-'}kg</td>
                    <td>${log.cleaningCycles || 0}</td>
                    <td><span class="status-badge status-completed">Completed</span></td>
                </tr>
            `).join('');
        }

        function updateReportsDisplay() {
            // Update weekly statistics
            const weeklyStatsDiv = document.getElementById('weeklyStats');
            const weekStart = new Date();
            weekStart.setDate(weekStart.getDate() - 7);

            const weeklyWaste = wasteLog.filter(w => new Date(w.date) > weekStart);
            const weeklyTransfers = transferLog.filter(t => new Date(t.date) > weekStart);
            const weeklyCleanings = cleaningLog.filter(c => new Date(c.date) > weekStart);

            weeklyStatsDiv.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; font-size: 0.9em;">
                    <div>Total Transfers: <strong>${weeklyTransfers.length}</strong></div>
                    <div>Total Cleanings: <strong>${weeklyCleanings.length}</strong></div>
                    <div>Total Waste: <strong>${weeklyWaste.reduce((sum, w) => sum + w.weight, 0).toFixed(1)}kg</strong></div>
                    <div>Avg Daily Waste: <strong>${(weeklyWaste.reduce((sum, w) => sum + w.weight, 0) / 7).toFixed(1)}kg</strong></div>
                </div>
            `;

            // Update efficiency metrics
            const efficiencyDiv = document.getElementById('efficiencyMetrics');
            const avgTransferRate = weeklyTransfers.length > 0 ?
                weeklyTransfers.reduce((sum, t) => sum + t.rate, 0) / weeklyTransfers.length : 0;
            const avgCleaningDuration = weeklyCleanings.length > 0 ?
                weeklyCleanings.reduce((sum, c) => sum + c.duration, 0) / weeklyCleanings.length : 0;

            efficiencyDiv.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr; gap: 10px; font-size: 0.9em;">
                    <div>Avg Transfer Rate: <strong>${avgTransferRate.toFixed(1)} t/hr</strong></div>
                    <div>Avg Cleaning Time: <strong>${avgCleaningDuration.toFixed(0)} min</strong></div>
                    <div>Godavan Utilization: <strong>${((1000 - flowData.godavanStock) / 1000 * 100).toFixed(1)}%</strong></div>
                </div>
            `;

            // Update waste analysis
            const wasteAnalysisDiv = document.getElementById('wasteAnalysis');
            const wasteByCategory = {};
            weeklyWaste.forEach(waste => {
                if (!wasteByCategory[waste.category]) wasteByCategory[waste.category] = 0;
                wasteByCategory[waste.category] += waste.weight;
            });

            const wasteBreakdown = Object.entries(wasteByCategory)
                .map(([catId, weight]) => {
                    const category = wasteCategories.find(c => c.id === catId);
                    return `${category?.name || catId}: ${weight.toFixed(1)}kg`;
                }).join('<br>');

            wasteAnalysisDiv.innerHTML = `
                <div style="font-size: 0.9em;">
                    ${wasteBreakdown || 'No waste data available'}
                </div>
            `;

            // Update photo compliance
            const photoComplianceDiv = document.getElementById('photoCompliance');
            const weeklyPhotos = photoSessions.filter(p => new Date(p.date) > weekStart);
            const expectedSessions = flowData.currentCycle * 7; // Assuming current cycle per day
            const complianceRate = expectedSessions > 0 ? (weeklyPhotos.length / expectedSessions * 100) : 100;

            photoComplianceDiv.innerHTML = `
                <div style="font-size: 0.9em;">
                    <div>Photo Sessions: <strong>${weeklyPhotos.length}</strong></div>
                    <div>Expected Sessions: <strong>${expectedSessions}</strong></div>
                    <div>Compliance Rate: <strong>${complianceRate.toFixed(1)}%</strong></div>
                    <div style="margin-top: 10px;">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${complianceRate}%; background: ${complianceRate >= 90 ? '#28a745' : complianceRate >= 70 ? '#ffc107' : '#dc3545'};"></div>
                        </div>
                    </div>
                </div>
            `;
        }

        function viewPhotos(sessionId) {
            const session = photoSessions.find(s => s.id === sessionId);
            if (session) {
                alert(`Photo Session Details:\nCycle: ${session.cycle}\nLocation: ${session.location}\nBefore Photos: ${session.beforePhotos.length}\nAfter Photos: ${session.afterPhotos.length}\nNotes: ${session.notes || 'None'}`);
            }
        }

        function updateAllDisplays() {
            updateFlowMonitoring();
            updatePhotoCaptureDisplay();
            updateWasteCategoriesDisplay();
            updateWasteStorageDisplay();
            updateDailyLogsDisplay();
            updateReportsDisplay();
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }

        // Set default dates for report
        document.getElementById('reportStartDate').value = new Date(Date.now() - 7*24*60*60*1000).toISOString().split('T')[0];
        document.getElementById('reportEndDate').value = new Date().toISOString().split('T')[0];

        // Initialize the application
        function init() {
            generateSampleData();
            updateAllDisplays();

            // Start cycle timer
            cycleTimer = setInterval(updateCycleTimer, 1000);

            // Check for alerts every minute
            setInterval(() => {
                const timeSinceLastCleaning = Date.now() - new Date(flowData.lastCleaned).getTime();
                if (timeSinceLastCleaning > 3.25 * 60 * 60 * 1000) { // 3 hours 15 minutes
                    if (confirm('Cleaning cycle is overdue! Start cleaning process now?')) {
                        showModal('cleaningModal');
                    }
                }
            }, 60 * 1000);
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl+S for save (backup)
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                backupData();
            }

            // Ctrl+R for reset daily data
            if (e.ctrlKey && e.key === 'r') {
                e.preventDefault();
                resetDailyData();
            }

            // F5 for refresh display
            if (e.key === 'F5') {
                e.preventDefault();
                updateAllDisplays();
            }
        });

        // Start the application
        init();
    </script>
</body>
</html> 