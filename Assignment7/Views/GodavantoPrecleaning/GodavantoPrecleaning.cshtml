<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wheat Mill Management</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background: #f0f2f5;
            color: #333;
            line-height: 1.6;
        }

        .header {
            background: white;
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }

            .header h1 {
                color: #2c3e50;
                margin-bottom: 5px;
            }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .nav-tabs {
            display: flex;
            background: white;
            border-radius: 8px;
            margin-bottom: 20px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .nav-tab {
            flex: 1;
            padding: 15px;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 14px;
            border-right: 1px solid #eee;
        }

            .nav-tab:last-child {
                border-right: none;
            }

            .nav-tab.active {
                background: #3498db;
                color: white;
            }

            .nav-tab:hover:not(.active) {
                background: #f8f9fa;
            }

        .tab-content {
            display: none;
        }

            .tab-content.active {
                display: block;
            }

        .card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

            .card h3 {
                margin-bottom: 15px;
                color: #2c3e50;
            }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .stat-value {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #666;
            font-size: 0.9em;
        }

        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: 500;
            }

            .form-group input,
            .form-group select,
            .form-group textarea {
                width: 100%;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
            }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn-primary {
            background: #3498db;
            color: white;
        }

        .btn-success {
            background: #27ae60;
            color: white;
        }

        .btn-warning {
            background: #f39c12;
            color: white;
        }

        .btn-danger {
            background: #e74c3c;
            color: white;
        }

        .btn:hover {
            opacity: 0.9;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }

            .table th,
            .table td {
                padding: 10px;
                text-align: left;
                border-bottom: 1px solid #eee;
            }

            .table th {
                background: #f8f9fa;
                font-weight: 600;
            }

        .alert {
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 4px;
            border-left: 4px solid;
        }

        .alert-info {
            background: #e8f4fd;
            border-color: #3498db;
            color: #2c3e50;
        }

        .alert-success {
            background: #d4edda;
            border-color: #27ae60;
            color: #155724;
        }

        .alert-warning {
            background: #fff3cd;
            border-color: #f39c12;
            color: #856404;
        }

        .blue {
            color: #3498db;
        }

        .green {
            color: #27ae60;
        }

        .orange {
            color: #f39c12;
        }

        .red {
            color: #e74c3c;
        }

        .camera-section {
            border: 2px dashed #ddd;
            border-radius: 8px;
            padding: 20px;
            text-align: center;
            margin-bottom: 15px;
        }

        .camera-preview {
            width: 100%;
            max-width: 400px;
            height: 300px;
            background: #f8f9fa;
            border-radius: 8px;
            margin: 10px auto;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
        }

            .camera-preview video {
                width: 100%;
                height: 100%;
                object-fit: cover;
                border-radius: 8px;
            }

            .camera-preview img {
                max-width: 100%;
                max-height: 100%;
                border-radius: 8px;
            }

        .bin-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .bin-card {
            border: 2px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .bin-card.selected {
                border-color: #3498db;
                background: #e8f4fd;
            }

            .bin-card:hover {
                border-color: #3498db;
            }

        .bin-name {
            font-weight: bold;
            font-size: 1.1em;
            margin-bottom: 8px;
        }

        .bin-info {
            font-size: 0.9em;
            color: #666;
        }

        .capacity-bar {
            width: 100%;
            height: 20px;
            background: #eee;
            border-radius: 10px;
            overflow: hidden;
            margin: 8px 0;
        }

        .capacity-fill {
            height: 100%;
            background: linear-gradient(90deg, #27ae60, #f39c12, #e74c3c);
            border-radius: 10px;
            transition: width 0.3s ease;
        }

        @@media (max-width: 768px) {
            .nav-tabs

        {
            flex-direction: column;
        }

        .form-row {
            grid-template-columns: 1fr;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .bin-grid {
            grid-template-columns: 1fr;
        }

        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🌾 Wheat Mill Management</h1>
        <p>Simple tracking system for wheat processing</p>
    </div>

    <div class="container">
        <!-- Navigation -->
        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('dashboard')">Dashboard</button>
            <button class="nav-tab" onclick="showTab('transfer')">Transfer</button>
            <button class="nav-tab" onclick="showTab('cleaning')">Cleaning</button>
            <button class="nav-tab" onclick="showTab('waste')">Waste Log</button>
            <button class="nav-tab" onclick="showTab('reports')">Reports</button>
        </div>

        <!-- Dashboard Tab -->
        <div id="dashboard" class="tab-content active">
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value green" id="totalGodavanStock">500.0</div>
                    <div class="stat-label">Total Godavan Stock (tons)</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value blue" id="transferredToday">0.0</div>
                    <div class="stat-label">Transferred Today (tons)</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value orange" id="totalBinsUsed">0</div>
                    <div class="stat-label">Bins in Use</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value red" id="totalWaste">0.0</div>
                    <div class="stat-label">Total Waste (kg)</div>
                </div>
            </div>

            <div class="card">
                <h3>Godavan Stock by Category</h3>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value blue" id="lowGodavanStock">125.0</div>
                        <div class="stat-label">LOW Godavan (tons)</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value green" id="mill1GodavanStock">125.0</div>
                        <div class="stat-label">MILL 1 Godavan (tons)</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value orange" id="mill2GodavanStock">125.0</div>
                        <div class="stat-label">MILL 2 Godavan (tons)</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value red" id="hdGodavanStock">125.0</div>
                        <div class="stat-label">HD Godavan (tons)</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <h3>Bin Status Overview</h3>
                <div id="binStatusOverview">
                    <div class="bin-grid" id="dashboardBins"></div>
                </div>
            </div>

            <div class="card">
                <h3>Current Status</h3>
                <div id="statusInfo">
                    <div class="alert alert-info">System ready for operations</div>
                </div>
            </div>

            <div class="card">
                <h3>Quick Actions</h3>
                <button class="btn btn-primary" onclick="showTab('transfer')">Start Transfer</button>
                <button class="btn btn-success" onclick="showTab('cleaning')">Log Cleaning</button>
                <button class="btn btn-warning" onclick="showTab('waste')">Add Waste Entry</button>
            </div>
        </div>

        <!-- Transfer Tab -->
        <div id="transfer" class="tab-content">
            <div class="card">
                <h3>Select Source Godavan</h3>
                <div class="bin-grid" id="godavanSelection"></div>
            </div>

            <div class="card">
                <h3>Select Destination Bin</h3>
                <div class="bin-grid" id="binSelection"></div>
            </div>

            <div class="card">
                <h3>Transfer Details</h3>
                <form id="transferForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label>Selected Godavan</label>
                            <input type="text" id="selectedGodavanDisplay" readonly style="background: #f8f9fa;">
                        </div>
                        <div class="form-group">
                            <label>Selected Bin</label>
                            <input type="text" id="selectedBinDisplay" readonly style="background: #f8f9fa;">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Amount to Transfer (tons)</label>
                            <input type="number" id="transferAmount" step="0.1" min="0.1" required>
                        </div>
                        <div class="form-group">
                            <label>Operator Name</label>
                            <input type="text" id="transferOperator" required>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary" disabled id="transferBtn">Select Godavan and Bin First</button>
                </form>
            </div>

            <div class="card">
                <h3>Transfer Log</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>From Godavan</th>
                            <th>To Bin</th>
                            <th>Amount (tons)</th>
                            <th>Operator</th>
                        </tr>
                    </thead>
                    <tbody id="transferHistory">
                        <tr>
                            <td colspan="5" style="text-align: center; color: #666;">No transfers recorded</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Cleaning Tab -->
        <div id="cleaning" class="tab-content">
            <div class="card">
                <h3>Capture Cleaning Photo</h3>
                <div class="camera-section">
                    <div class="camera-preview" id="cameraPreview">
                        <span>Click "Start Camera" to begin</span>
                    </div>
                    <button type="button" class="btn btn-primary" id="startCamera">Start Camera</button>
                    <button type="button" class="btn btn-success" id="capturePhoto" style="display: none;">Capture Photo</button>
                    <button type="button" class="btn btn-danger" id="stopCamera" style="display: none;">Stop Camera</button>
                </div>
            </div>

            <div class="card">
                <h3>Log Cleaning Process</h3>
                <form id="cleaningForm">
                    <div class="form-group">
                        <label>Cleaning Cycle</label>
                        <select id="cleaningCycle" required>
                            <option value="">Select Cycle</option>
                            <option value="1">Cycle 1 (0-3 hours)</option>
                            <option value="2">Cycle 2 (3-6 hours)</option>
                            <option value="3">Cycle 3 (6-9 hours)</option>
                            <option value="4">Cycle 4 (9-12 hours)</option>
                            <option value="5">Cycle 5 (12-15 hours)</option>
                            <option value="6">Cycle 6 (15-18 hours)</option>
                            <option value="7">Cycle 7 (18-21 hours)</option>
                            <option value="8">Cycle 8 (21-24 hours)</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-success" id="cleaningSubmitBtn" disabled>Capture Photo First</button>
                </form>
            </div>

            <div class="card">
                <h3>Cleaning History</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date & Time</th>
                            <th>Cycle</th>
                            <th>Photo</th>
                        </tr>
                    </thead>
                    <tbody id="cleaningHistory">
                        <tr>
                            <td colspan="3" style="text-align: center; color: #666;">No cleaning records</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Waste Tab -->
        <div id="waste" class="tab-content">
            <div class="card">
                <h3>Add Waste Entry</h3>
                <form id="wasteForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label>Waste Type</label>
                            <select id="wasteType" required>
                                <option value="">Select Type</option>
                                <option value="drum">Drum Shield Waste</option>
                                <option value="magnet">Magnet Waste</option>
                                <option value="separator">Separator Waste</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Weight (kg)</label>
                            <input type="number" id="wasteWeight" step="0.1" min="0" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div hidden class="form-group">
                            <label>Storage Location</label>
                            <select id="wasteLocation" required>
                                <option value="container-1">Select Location</option>
                                <option value="container-1">Container 1</option>
                                <option value="container-2">Container 2</option>
                                <option value="container-3">Container 3</option>
                                <option value="yard">Yard Area</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Collected By</label>
                            <input type="text" id="wasteOperator" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Notes</label>
                        <textarea id="wasteNotes" rows="3" placeholder="Additional details..."></textarea>
                    </div>
                    <button type="submit" class="btn btn-warning">Add Waste Entry</button>
                </form>
            </div>

            <div class="card">
                <h3>Waste Log</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Type</th>
                            <th>Weight (kg)</th>
                            <th hidden>Location</th>
                            <th>Operator</th>
                        </tr>
                    </thead>
                    <tbody id="wasteHistory">
                        <tr>
                            <td colspan="5" style="text-align: center; color: #666;">No waste entries</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Reports Tab -->
        <div id="reports" class="tab-content">
            <div class="card">
                <h3>Daily Summary</h3>
                <div id="dailySummary">
                    <div class="alert alert-info">No data for today yet</div>
                </div>
            </div>

            <div class="card">
                <h3>Generate Report</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label>Report Type</label>
                        <select id="reportType">
                            <option value="daily">Daily Report</option>
                            <option value="weekly">Weekly Report</option>
                            <option value="waste">Waste Report</option>
                            <option value="bins">Bin Usage Report</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Date</label>
                        <input type="date" id="reportDate" value="">
                    </div>
                </div>
                <button class="btn btn-primary" onclick="generateReport()">Generate Report</button>
            </div>
        </div>
    </div>

    <script>
        // Godavan configuration
        const godavanConfig = [
            { id: 'godavan-low', name: 'LOW', stock: 125.0 },
            { id: 'godavan-mill1', name: 'MILL 1', stock: 125.0 },
            { id: 'godavan-mill2', name: 'MILL 2', stock: 125.0 },
            { id: 'godavan-hd', name: 'HD', stock: 125.0 }
        ];

        // Bin configuration (all capacities in tons)
        const binConfig = [
            { id: 'bin-25kg-1', name: 'Small Bin 1', capacity: 25, current: 0, unit: 'tons' },
            { id: 'bin-25kg-2', name: 'Small Bin 2', capacity: 25, current: 0, unit: 'tons' },
            { id: 'bin-25kg-3', name: 'Small Bin 3', capacity: 25, current: 0, unit: 'tons' },
            { id: 'bin-65t-1', name: 'Large Bin 1', capacity: 65, current: 0, unit: 'tons' },
            { id: 'bin-65t-2', name: 'Large Bin 2', capacity: 65, current: 0, unit: 'tons' }
        ];

        // Data storage (all in tons)
        let data = {
            godavans: [...godavanConfig],
            totalGodavanStock: 500.0, // Total of all godavans
            transferredToday: 0,
            totalWaste: 0,
            transfers: [],
            cleanings: [],
            wasteEntries: [],
            bins: [...binConfig],
            currentPhoto: null
        };

        let selectedBinId = null;
        let selectedGodavanId = null;
        let cameraStream = null;

        // Tab switching
        function showTab(tabId) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });

            document.getElementById(tabId).classList.add('active');
            event.target.classList.add('active');

            updateDisplays();
        }

        // Update all displays
        function updateDisplays() {
            // Update dashboard stats (all in tons)
            document.getElementById('totalGodavanStock').textContent = data.totalGodavanStock.toFixed(1);
            document.getElementById('transferredToday').textContent = data.transferredToday.toFixed(1);
            document.getElementById('totalBinsUsed').textContent = data.bins.filter(bin => bin.current > 0).length;
            document.getElementById('totalWaste').textContent = data.totalWaste.toFixed(1);

            // Update individual Godavan stocks
            document.getElementById('lowGodavanStock').textContent = data.godavans.find(g => g.id === 'godavan-low').stock.toFixed(1);
            document.getElementById('mill1GodavanStock').textContent = data.godavans.find(g => g.id === 'godavan-mill1').stock.toFixed(1);
            document.getElementById('mill2GodavanStock').textContent = data.godavans.find(g => g.id === 'godavan-mill2').stock.toFixed(1);
            document.getElementById('hdGodavanStock').textContent = data.godavans.find(g => g.id === 'godavan-hd').stock.toFixed(1);

            updateBinDisplays();
            updateGodavanDisplays();
            updateStatus();
            updateTables();
            updateDailySummary();
        }

        function updateBinDisplays() {
            const binSelectionDiv = document.getElementById('binSelection');
            const dashboardBinsDiv = document.getElementById('dashboardBins');
            const godavanSelectionDiv = document.getElementById('godavanSelection');

            // Update Godavan selection
            if (godavanSelectionDiv) {
                const godavanHTML = data.godavans.map(godavan => {
                    return `
                        <div class="bin-card ${selectedGodavanId === godavan.id ? 'selected' : ''}"
                             onclick="selectGodavan('${godavan.id}')" style="cursor: pointer;">
                            <div class="bin-name">${godavan.name} Godavan</div>
                            <div class="bin-info">Stock: ${godavan.stock.toFixed(1)}t</div>
                            <div class="capacity-bar">
                                <div class="capacity-fill" style="width: ${(godavan.stock/125)*100}%"></div>
                            </div>
                        </div>
                    `;
                }).join('');
                godavanSelectionDiv.innerHTML = godavanHTML;
            }

            // Update Bin selection
            const binHTML = data.bins.map(bin => {
                const fillPercentage = (bin.current / bin.capacity) * 100;
                const remainingCapacity = bin.capacity - bin.current;

                return `
                    <div class="bin-card ${selectedBinId === bin.id ? 'selected' : ''}"
                         onclick="selectBin('${bin.id}')" style="cursor: pointer;">
                        <div class="bin-name">${bin.name}</div>
                        <div class="bin-info">Capacity: ${bin.capacity.toFixed(1)}t</div>
                        <div class="bin-info">Current: ${bin.current.toFixed(1)}t</div>
                        <div class="bin-info">Available: ${remainingCapacity.toFixed(1)}t</div>
                        <div class="capacity-bar">
                            <div class="capacity-fill" style="width: ${fillPercentage}%"></div>
                        </div>
                    </div>
                `;
            }).join('');

            if (binSelectionDiv) {
                binSelectionDiv.innerHTML = binHTML;
            }
            if (dashboardBinsDiv) {
                dashboardBinsDiv.innerHTML = binHTML.replace(/onclick="selectBin\('[^']+'\)"/g, '');
            }
        }

        function selectGodavan(godavanId) {
            console.log('Selecting Godavan:', godavanId); // Debug log
            selectedGodavanId = godavanId;
            const selectedGodavan = data.godavans.find(g => g.id === godavanId);

            if (selectedGodavan) {
                document.getElementById('selectedGodavanDisplay').value =
                    `${selectedGodavan.name} (Available: ${selectedGodavan.stock.toFixed(1)}t)`;
                updateTransferButton();
            }

            updateBinDisplays();
        }

        function selectBin(binId) {
            console.log('Selecting Bin:', binId); // Debug log
            selectedBinId = binId;
            const selectedBin = data.bins.find(bin => bin.id === binId);

            if (selectedBin) {
                const remainingCapacity = selectedBin.capacity - selectedBin.current;
                document.getElementById('selectedBinDisplay').value =
                    `${selectedBin.name} (Available: ${remainingCapacity.toFixed(1)}t)`;
                updateTransferButton();
            }

            updateBinDisplays();
        }

        function updateTransferButton() {
            console.log('Updating transfer button - Godavan:', selectedGodavanId, 'Bin:', selectedBinId); // Debug log
            const transferBtn = document.getElementById('transferBtn');
            const selectedGodavan = data.godavans.find(g => g.id === selectedGodavanId);
            const selectedBin = data.bins.find(b => b.id === selectedBinId);

            if (selectedGodavan && selectedBin) {
                const maxTransfer = Math.min(
                    selectedGodavan.stock,
                    selectedBin.capacity - selectedBin.current
                );
                const transferAmountInput = document.getElementById('transferAmount');
                if (transferAmountInput) {
                    transferAmountInput.max = maxTransfer;
                }
                transferBtn.disabled = false;
                transferBtn.textContent = 'Start Transfer';
                console.log('Transfer enabled, max amount:', maxTransfer); // Debug log
            } else {
                transferBtn.disabled = true;
                transferBtn.textContent = 'Select Godavan and Bin First';
                console.log('Transfer disabled - missing selection'); // Debug log
            }
        }

        function updateGodavanDisplays() {
            // Update total stock
            data.totalGodavanStock = data.godavans.reduce((sum, g) => sum + g.stock, 0);
        }

        function updateStatus() {
            const statusDiv = document.getElementById('statusInfo');
            let alerts = [];

            if (data.totalGodavanStock < 50) { // 50 tons
                alerts.push('<div class="alert alert-warning">Low total Godavan stock - consider replenishment</div>');
            }

            // Check individual Godavan stocks
            data.godavans.forEach(godavan => {
                if (godavan.stock < 25) { // Less than 25 tons
                    alerts.push(`<div class="alert alert-warning">${godavan.name} Godavan low stock (${godavan.stock.toFixed(1)}t remaining)</div>`);
                }
            });

            const fullBins = data.bins.filter(bin => (bin.current / bin.capacity) > 0.9);
            if (fullBins.length > 0) {
                alerts.push(`<div class="alert alert-warning">${fullBins.length} bin(s) nearly full</div>`);
            }

            if (alerts.length === 0) {
                statusDiv.innerHTML = '<div class="alert alert-success">All systems operating normally</div>';
            } else {
                statusDiv.innerHTML = alerts.join('');
            }
        }

        function updateTables() {
            // Transfer history
            const transferTable = document.getElementById('transferHistory');
            if (data.transfers.length === 0) {
                transferTable.innerHTML = '<tr><td colspan="5" style="text-align: center; color: #666;">No transfers recorded</td></tr>';
            } else {
                transferTable.innerHTML = data.transfers.slice(-10).reverse().map(transfer => `
                    <tr>
                        <td>${new Date(transfer.time).toLocaleString()}</td>
                        <td>${transfer.fromGodavan}</td>
                        <td>${transfer.toBin}</td>
                        <td>${transfer.amount.toFixed(2)}t</td>
                        <td>${transfer.operator}</td>
                    </tr>
                `).join('');
            }

            // Cleaning history
            const cleaningTable = document.getElementById('cleaningHistory');
            if (data.cleanings.length === 0) {
                cleaningTable.innerHTML = '<tr><td colspan="3" style="text-align: center; color: #666;">No cleaning records</td></tr>';
            } else {
                cleaningTable.innerHTML = data.cleanings.slice(-10).reverse().map(cleaning => `
                    <tr>
                        <td>${new Date(cleaning.time).toLocaleString()}</td>
                        <td>Cycle ${cleaning.cycle}</td>
                        <td><img src="${cleaning.photo}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;" alt="Cleaning photo"></td>
                    </tr>
                `).join('');
            }

            // Waste history
            const wasteTable = document.getElementById('wasteHistory');
            if (data.wasteEntries.length === 0) {
                wasteTable.innerHTML = '<tr><td colspan="5" style="text-align: center; color: #666;">No waste entries</td></tr>';
            } else {
                wasteTable.innerHTML = data.wasteEntries.slice(-10).reverse().map(waste => `
                    <tr>
                        <td>${new Date(waste.time).toLocaleString()}</td>
                        <td>${waste.type}</td>
                        <td>${waste.weight}</td>
                      
                        <td>${waste.operator}</td>
                    </tr>
                `).join('');
            }
        }

        function updateDailySummary() {
            const today = new Date().toDateString();
            const todayTransfers = data.transfers.filter(t => new Date(t.time).toDateString() === today);
            const todayCleanings = data.cleanings.filter(c => new Date(c.time).toDateString() === today);
            const todayWaste = data.wasteEntries.filter(w => new Date(w.time).toDateString() === today);

            const summaryDiv = document.getElementById('dailySummary');
            summaryDiv.innerHTML = `
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px;">
                    <div><strong>Transfers:</strong> ${todayTransfers.length}</div>
                    <div><strong>Cleanings:</strong> ${todayCleanings.length}</div>
                    <div><strong>Waste Entries:</strong> ${todayWaste.length}</div>
                    <div><strong>Total Transferred:</strong> ${data.transferredToday.toFixed(1)}t</div>
                </div>
            `;
        }

        // Camera functionality
        document.getElementById('startCamera').addEventListener('click', async function() {
            try {
                cameraStream = await navigator.mediaDevices.getUserMedia({
                    video: { facingMode: 'environment' },
                    audio: false
                });

                const video = document.createElement('video');
                video.srcObject = cameraStream;
                video.autoplay = true;
                video.playsInline = true;

                const preview = document.getElementById('cameraPreview');
                preview.innerHTML = '';
                preview.appendChild(video);

                document.getElementById('startCamera').style.display = 'none';
                document.getElementById('capturePhoto').style.display = 'inline-block';
                document.getElementById('stopCamera').style.display = 'inline-block';
            } catch (err) {
                alert('Camera access denied or not available');
                console.error('Camera error:', err);
            }
        });

        document.getElementById('capturePhoto').addEventListener('click', function() {
            const video = document.querySelector('#cameraPreview video');
            if (video) {
                const canvas = document.createElement('canvas');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;

                const ctx = canvas.getContext('2d');
                ctx.drawImage(video, 0, 0);

                data.currentPhoto = canvas.toDataURL('image/jpeg', 0.8);

                // Replace video with captured image
                const img = document.createElement('img');
                img.src = data.currentPhoto;

                const preview = document.getElementById('cameraPreview');
                preview.innerHTML = '';
                preview.appendChild(img);

                // Stop camera
                if (cameraStream) {
                    cameraStream.getTracks().forEach(track => track.stop());
                    cameraStream = null;
                }

                document.getElementById('startCamera').style.display = 'inline-block';
                document.getElementById('capturePhoto').style.display = 'none';
                document.getElementById('stopCamera').style.display = 'none';
                document.getElementById('cleaningSubmitBtn').disabled = false;
                document.getElementById('cleaningSubmitBtn').textContent = 'Log Cleaning';
            }
        });

        document.getElementById('stopCamera').addEventListener('click', function() {
            if (cameraStream) {
                cameraStream.getTracks().forEach(track => track.stop());
                cameraStream = null;
            }

            const preview = document.getElementById('cameraPreview');
            preview.innerHTML = '<span>Click "Start Camera" to begin</span>';

            document.getElementById('startCamera').style.display = 'inline-block';
            document.getElementById('capturePhoto').style.display = 'none';
            document.getElementById('stopCamera').style.display = 'none';
        });

        // Form handlers
        document.getElementById('transferForm').addEventListener('submit', function(e) {
            e.preventDefault();

            if (!selectedGodavanId || !selectedBinId) {
                alert('Please select both a Godavan and a Bin first!');
                return;
            }

            const amount = parseFloat(document.getElementById('transferAmount').value);
            const operator = document.getElementById('transferOperator').value;
            const selectedGodavan = data.godavans.find(g => g.id === selectedGodavanId);
            const selectedBin = data.bins.find(b => b.id === selectedBinId);

            if (amount > selectedGodavan.stock) {
                alert('Transfer amount exceeds available Godavan stock!');
                return;
            }

            if (amount > (selectedBin.capacity - selectedBin.current)) {
                alert('Transfer amount exceeds bin capacity!');
                return;
            }

            const transfer = {
                time: new Date(),
                fromGodavanId: selectedGodavanId,
                fromGodavan: selectedGodavan.name,
                toBinId: selectedBinId,
                toBin: selectedBin.name,
                amount: amount,
                operator: operator
            };

            data.transfers.push(transfer);
            selectedGodavan.stock -= amount;
            selectedBin.current += amount;
            data.transferredToday += amount;

            // Reset form and selection
            this.reset();
            selectedGodavanId = null;
            selectedBinId = null;
            document.getElementById('selectedGodavanDisplay').value = '';
            document.getElementById('selectedBinDisplay').value = '';
            document.getElementById('transferBtn').disabled = true;
            document.getElementById('transferBtn').textContent = 'Select Godavan and Bin First';

            updateDisplays();
            alert(`Transfer of ${amount.toFixed(2)}t from ${selectedGodavan.name} to ${selectedBin.name} recorded successfully!`);
        });

        document.getElementById('cleaningForm').addEventListener('submit', function(e) {
            e.preventDefault();

            if (!data.currentPhoto) {
                alert('Please capture a photo first!');
                return;
            }

            const cycle = document.getElementById('cleaningCycle').value;

            const cleaning = {
                time: new Date(),
                cycle: cycle,
                photo: data.currentPhoto
            };

            data.cleanings.push(cleaning);

            // Reset form and photo
            this.reset();
            data.currentPhoto = null;
            document.getElementById('cameraPreview').innerHTML = '<span>Click "Start Camera" to begin</span>';
            document.getElementById('cleaningSubmitBtn').disabled = true;
            document.getElementById('cleaningSubmitBtn').textContent = 'Capture Photo First';

            updateDisplays();
            alert('Cleaning logged successfully!');
        });

        document.getElementById('wasteForm').addEventListener('submit', function(e) {
            e.preventDefault();

            const type = document.getElementById('wasteType').value;
            const weight = parseFloat(document.getElementById('wasteWeight').value);
            const location = document.getElementById('wasteLocation').value;
            const operator = document.getElementById('wasteOperator').value;
            const notes = document.getElementById('wasteNotes').value;

            const waste = {
                time: new Date(),
                type: type,
                weight: weight,
                location: location,
                operator: operator,
                notes: notes
            };

            data.wasteEntries.push(waste);
            data.totalWaste += weight;

            this.reset();
            updateDisplays();
            alert('Waste entry added successfully!');
        });

        function generateReport() {
            const type = document.getElementById('reportType').value;
            const date = document.getElementById('reportDate').value;

            let reportContent = '';

            switch(type) {
                case 'daily':
                    reportContent = generateDailyReport(date);
                    break;
                case 'weekly':
                    reportContent = generateWeeklyReport(date);
                    break;
                case 'waste':
                    reportContent = generateWasteReport(date);
                    break;
                case 'bins':
                    reportContent = generateBinReport();
                    break;
            }

            // Create and download report
            const blob = new Blob([reportContent], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${type}_report_${date || new Date().toISOString().split('T')[0]}.txt`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function generateDailyReport(date) {
            const targetDate = date ? new Date(date) : new Date();
            const dateStr = targetDate.toDateString();

            const dayTransfers = data.transfers.filter(t => new Date(t.time).toDateString() === dateStr);
            const dayCleanings = data.cleanings.filter(c => new Date(c.time).toDateString() === dateStr);
            const dayWaste = data.wasteEntries.filter(w => new Date(w.time).toDateString() === dateStr);

            let report = `DAILY REPORT - ${dateStr}\n`;
            report += `====================================\n\n`;
            report += `SUMMARY:\n`;
            report += `- Total Transfers: ${dayTransfers.length}\n`;
            report += `- Total Cleanings: ${dayCleanings.length}\n`;
            report += `- Total Waste Entries: ${dayWaste.length}\n`;
            report += `- Total Amount Transferred: ${dayTransfers.reduce((sum, t) => sum + t.amount, 0).toFixed(2)} tons\n\n`;

            if (dayTransfers.length > 0) {
                report += `TRANSFERS:\n`;
                dayTransfers.forEach(transfer => {
                    report += `- ${new Date(transfer.time).toLocaleTimeString()}: ${transfer.amount.toFixed(2)}t from ${transfer.fromGodavan} to ${transfer.toBin} by ${transfer.operator}\n`;
                });
                report += `\n`;
            }

            if (dayCleanings.length > 0) {
                report += `CLEANINGS:\n`;
                dayCleanings.forEach(cleaning => {
                    report += `- ${new Date(cleaning.time).toLocaleTimeString()}: Cycle ${cleaning.cycle}\n`;
                });
                report += `\n`;
            }

            return report;
        }

        function generateWeeklyReport(date) {
            // Implementation for weekly report
            return `WEEKLY REPORT - Week ending ${date}\n====================================\n\nWeekly report functionality to be implemented.\n`;
        }

        function generateWasteReport(date) {
            const targetDate = date ? new Date(date) : new Date();
            const dateStr = targetDate.toDateString();

            const dayWaste = data.wasteEntries.filter(w => new Date(w.time).toDateString() === dateStr);

            let report = `WASTE REPORT - ${dateStr}\n`;
            report += `====================================\n\n`;
            report += `SUMMARY:\n`;
            report += `- Total Waste Entries: ${dayWaste.length}\n`;
            report += `- Total Waste Weight: ${dayWaste.reduce((sum, w) => sum + w.weight, 0).toFixed(1)} kg\n\n`;

            if (dayWaste.length > 0) {
                report += `WASTE ENTRIES:\n`;
                dayWaste.forEach(waste => {
                    report += `- ${new Date(waste.time).toLocaleTimeString()}: ${waste.type} - ${waste.weight}kg at ${waste.location} by ${waste.operator}\n`;
                });
            }

            return report;
        }

        function generateBinReport() {
            let report = `BIN STATUS REPORT - ${new Date().toDateString()}\n`;
            report += `====================================\n\n`;

            data.bins.forEach(bin => {
                const fillPercentage = ((bin.current / bin.capacity) * 100).toFixed(1);
                const remaining = bin.capacity - bin.current;
                report += `${bin.name}:\n`;
                report += `  Capacity: ${bin.capacity.toFixed(1)} tons\n`;
                report += `  Current: ${bin.current.toFixed(1)} tons (${fillPercentage}%)\n`;
                report += `  Available: ${remaining.toFixed(1)} tons\n\n`;
            });

            return report;
        }

        // Set default date
        document.getElementById('reportDate').value = new Date().toISOString().split('T')[0];

        // Initialize displays
        updateDisplays();
    </script>
</body>
</html>